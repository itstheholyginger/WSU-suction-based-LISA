{"version":3,"sources":["AppMode.js","components/Welcome.jsx","components/variables/RandVars.jsx","components/variables/OtherVars.jsx","components/Header.jsx","resources/template.jsx","components/apiClient.js","resources/labels.js","components/DataForm.jsx","resources/units.js","components/graphs/RVDist.jsx","components/graphs/FOSFreq.jsx","components/graphs/PFbyZ.jsx","components/graphs/SSbyZ.jsx","components/graphs/SSbySe.jsx","components/DisplayGraphs.jsx","components/tables/FOSTable.jsx","components/tables/RVTable.jsx","components/Loading.jsx","components/Display.jsx","components/App.jsx","index.js"],"names":["AppMode","WELCOME","DATAFORM","DISPLAY","Object","freeze","WelcomePage","className","React","Component","WelcomeBanner","AppDescription","ButtonContainer","Button","variant","RandVar","props","handleDistChange","selectedOption","selected","target","value","name","console","log","state","this","conf","dist","data","Form","Row","label","Group","as","Col","controlId","Label","Control","onChange","defaultValue","handleChange","handleNondetChange","style","width","type","min","placeholder","handleDetChange","NondetRandVarDisplayer","TruncNormalVar","e","bind","step","low","UniformVar","LognormalVar","TruncLognormalVar","ConstantVar","ConstVar","Header","Navbar","bg","Brand","href","Toggle","Collapse","Text","testing","numVars","sat","randVars","c","high","mean","stdev","c_r","const_val","phi","k_s","a","n","logmean","logstdev","constVars","gamma","gamma_w","slope","q","H_wt","z_step","axios","create","baseURL","timeout","headers","LABELS","DataFormPage","varName","key","newData","setState","val","detVal","handleConstVarChange","handleNumVarChange","number","handleZVarChange","z","handleSatChange","handleAnalysisChange","handleFluxChange","flux","handleFluxAdd","append","handleFluxRemove","index","splice","onSubmit","preventDefault","API","post","then","res","changeMode","undefined","title","onClick","UNITS","RVDistGraph","setOptions","options","push","curData","rv","RVBar","getTickFormat","t","toExponential","toFixed","datapoints","domainPadding","overflow","theme","V","material","containerComponent","labels","datum","x","y","axisLabel","padding","tickFormat","tickCount","dependentAxis","nextProps","prevState","valsArr","vals","freqObj","forEach","rounded","Number","FOSFreq","componentDidMount","sorted","sort","FreqHistFOS","getCount","max","list","i","tickValues","length","fs_vals","PFbyZ","detGetDatapoints","dp","probFail","ticks","getTickVals","cur","sharedAxisStyles","tickLabels","fontSize","fontStyle","stroke","parent","border","orientation","invertAxis","SSbyZ","ss","Array","Math","ceil","keys","domain","interpolation","SSbySe","Se","DisplayGraphs","Tabs","defaultActiveKey","id","Tab","eventKey","FOSTable","getRows","sortedZ","Table","striped","hover","bordered","size","FSRowDisplay","RVTable","detRows","vars","getTable","table","RandVarRowDisplayDet","RandVarRowDisplayNondet","Loading","loading","done","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","defaultOptions2","doneData","height","DisplayPage","setTimeout","getResults","results","get","status","modeTitle","modeToPage","App","handleChangeMode","newMode","mode","ModePage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1696fa9a.chunk.js","sourcesContent":["const AppMode = {\n    WELCOME: 'WelcomeMode',\n    DATAFORM: 'DataFormMode',\n    DISPLAY: 'DisplayMode'\n}\n\nObject.freeze(AppMode)\nexport default AppMode\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\n\nclass WelcomePage extends React.Component {\n  render () {\n    return (\n      <div className=\"welcome-page\">\n        <div className=\"welcome-banner\">\n          <WelcomeBanner />\n        </div>\n\n        <div className=\"app-desc\">\n          <AppDescription />\n        </div>\n\n        <div className=\"button-container\">\n          <ButtonContainer />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WelcomeBanner extends React.Component {\n  render () {\n    return (\n      <div className=\"welcome-banner\">\n        <div className=\"welcome-text\">Welcome to LISA</div>\n      </div>\n    )\n  }\n}\n\nclass AppDescription extends React.Component {\n  render () {\n    return (\n      <div className=\"\">\n        <h2>Application Description</h2>\n        <br />\n        <p>Description of the LISA project. History and what it does.</p>\n      </div>\n    )\n  }\n}\n\nclass ButtonContainer extends React.Component {\n  render () {\n    return (\n      <div className=\"\">\n        <Button variant=\"success\">New Data</Button>\n        <Button variant=\"info\">Load Old Data by ID</Button>\n      </div>\n    )\n  }\n}\n\nexport default WelcomePage\n","import React, { Component, Fragment } from 'react'\nimport { Form, Col } from 'react-bootstrap'\nimport PropTypes from 'prop-types'\n\nclass RandVar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    componentDidMount() {\n        this.props.handleDistChange(this.props.name, 'truncnormal')\n    }\n\n    static propTypes = {\n        handleDistChange: PropTypes.func,\n        conf: PropTypes.string,\n        name: PropTypes.string,\n        label: PropTypes.string,\n        handleNondetChange: PropTypes.func,\n        handleDetChange: PropTypes.func,\n        data: PropTypes.object\n    };\n\n    handleDistChange = selectedOption => {\n        var selected = selectedOption.target.value\n        this.props.handleDistChange(this.props.name, selected)\n        console.log('selected: ', selected)\n    };\n\n    render() {\n        const conf = this.props.conf\n        var dist = this.props.data.dist\n        if (conf === 'nondet') {\n            return (\n                <Form.Row className=\"formRandVarContainerRow\">\n                    <div className=\"randVarContainer\">\n                        <Form.Row className=\"formLabel\">\n                            <h6>{this.props.label}</h6>\n                        </Form.Row>\n\n                        <Form.Row className=\"randVarInfo\">\n                            <Form.Group\n                                as={Col}\n                                className=\"col-sm-4\"\n                                controlId=\"formDist\"\n                            >\n                                <Form.Label> Distribution </Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    className=\"input\"\n                                    onChange={this.handleDistChange}\n                                >\n                                    <option value=\"truncnormal\" defaultValue>\n                                        Truncated Normal\n                                    </option>\n                                    <option value=\"lognormal\">Lognormal</option>\n                                    <option value=\"trunclognormal\">Truncated Lognormal</option>\n                                    <option value=\"uniform\">Uniform</option>\n                                    <option value=\"constant\">Constant</option>\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group as={Col} className=\"col-sm-8\">\n                                <div className=\"randVarInputs\">\n                                    <NondetRandVarDisplayer\n                                        dist={dist}\n                                        name={this.props.name}\n                                        data={this.props.data}\n                                        handleChange={\n                                            this.props.handleNondetChange\n                                        }\n                                    />\n                                </div>\n                            </Form.Group>\n                        </Form.Row>\n                    </div>\n                </Form.Row>\n            )\n        } else if (conf === 'det') {\n            return (\n                <Form.Row className=\"formRandVarContainerRow\">\n                    <div className=\"randVarContainer\">\n                        <Form.Row\n                            className=\"randVarInfo\"\n                            style={{ width: '50%' }}\n                        >\n                            <Form.Label> {this.props.label}</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                placeholder=\"Enter value\"\n                                onChange={this.handleDetChange}\n                            />\n                        </Form.Row>\n                    </div>\n                </Form.Row>\n            )\n        }\n    }\n}\n\n// class DetRandVarDisplayer extends Component {\n//     static propTypes = {\n//         handleChange: PropTypes.func,\n//         data: PropTypes.object,\n//         name: PropTypes.string\n//     }\n//     render () {\n//         return (\n//         )\n//     }\n// }\n\nclass NondetRandVarDisplayer extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        dist: PropTypes.string,\n        name: PropTypes.string\n    };\n\n    render() {\n        const dist = this.props.dist\n\n        switch (dist) {\n            case 'uniform':\n                return (\n                    <UniformVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'truncnormal':\n                return (\n                    <TruncNormalVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'lognormal':\n                return (\n                    <LognormalVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'trunclognormal':\n                return (\n                    <TruncLognormalVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'constant':\n                return (\n                    <ConstantVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            default:\n                return (\n                    <p>\n                        Error: invalid distribution selection\n                    </p>\n                )\n        }\n    }\n}\n\nclass TruncNormalVar extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in normal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Mean</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"mean\"\n                            onChange={this.handleChange.bind(this)}\n                            placeholder=\"Enter mean\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Std Dev</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            placeholder=\"Enter standard deviation\"\n                            name=\"stdev\"\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>Low</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"low\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter low\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>High</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={this.props.data.low}\n                            step={0.0000000001}\n                            name=\"high\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter high\"\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </Fragment>\n        )\n    }\n}\n\nclass UniformVar extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in uniform rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>Low</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        step={0.0000000001}\n                        name=\"low\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter low\"\n                    />\n                </Form.Group>\n\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>High</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={this.props.data.low}\n                        step={0.000000001}\n                        name=\"high\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter high\"\n                    />\n                </Form.Group>\n            </Fragment>\n        )\n    }\n}\n\nclass LognormalVar extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in lognormal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>Logmean</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        step={0.0000000001}\n                        name=\"logmean\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter logmean\"\n                    />\n                    <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                        <Form.Label>Logstdev</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"logstdev\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter logstdev\"\n                        />\n                    </Form.Group>\n                </Form.Group>\n            </Fragment>\n        )\n    }\n}\n\nclass TruncLognormalVar extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in trunc lognormal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Logmean</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"logmean\"\n                            onChange={this.handleChange.bind(this)}\n                            placeholder=\"Enter logmean\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Logstdev</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            placeholder=\"Enter logstdev\"\n                            name=\"logstdev\"\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>Low</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"low\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter low\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>High</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={this.props.data.low}\n                            step={0.0000000001}\n                            name=\"high\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter high\"\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </Fragment>\n        )\n    }\n}\n\nclass ConstantVar extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in lognormal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>Value</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        step={0.0000000001}\n                        name=\"const_val\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter constant value\"\n                    />\n                </Form.Group>\n            </Fragment>\n        )\n    }\n}\n\n\nexport default RandVar\n","import React, { Component } from 'react';\nimport { Form, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nclass ConstVar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n        };\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n        name: PropTypes.string,\n        label: PropTypes.string,\n    };\n\n    handleChange = e => {\n        this.props.handleChange(this.props.name, e.target.value);\n        console.log('in const var change');\n    };\n\n    render() {\n        // text for a placeholder for each value input field\n        return (\n            <div className=\"form-group\">\n                <Form.Row style={{ width: '300px' }}>\n                    <Form.Group as={Col} controlId=\"formVal\" style={{}}>\n                        <Form.Label>\n                            <h6>{this.props.label}</h6>\n                        </Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={-100}\n                            // ASK: currently using step value of 0.0001, should it be higher or lower?\n                            step={0.0000000001}\n                            placeholder=\"Enter value\"\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </div>\n        );\n    }\n}\n\nclass NumRandVars extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 'numVars',\n            label: 'Number of Random Variables',\n            value: 0,\n        };\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n    };\n\n    handleChange = e => {\n        var val = e.target.value;\n        this.props.handleChange(val);\n        console.log('in numvar change');\n    };\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <Form.Group as={Col} controlId=\"form-numVars\">\n                    <Form.Label>Number of Random Variables</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        placeholder=\"Enter value\"\n                        onChange={this.handleChange}\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n}\n\nclass Saturation extends React.Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n    };\n\n    handleChange = selectedOption => {\n        var selected = selectedOption.target.value;\n        console.log('selected option: ', selected);\n        if (selected === 'true') {\n            this.props.handleChange(true);\n        } else if (selected === 'false') {\n            this.props.handleChange(false);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <Form.Group as={Col} controlId=\"formDropDown\">\n                    <Form.Label>Soil Saturation</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        className=\"input\"\n                        onChange={this.handleChange}\n                    >\n                        <option value=\"true\" defaultValue>\n                            Saturated\n                        </option>\n                        <option value=\"false\">Unsaturated</option>\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n    }\n}\n\nclass Analysis extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n    };\n\n    handleChange = selectedOption => {\n        var selected = selectedOption.target.value;\n        console.log('selected option: ', selected);\n        this.props.handleChange(selected);\n    };\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <Form.Group as={Col} controlId=\"formDropDown\">\n                    <Form.Label>Analysis Type</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        className=\"input\"\n                        onChange={this.handleChange}\n                    >\n                        <option value=\"nondet\">Non-determinisitic</option>\n                        <option value=\"det\" defaultValue>\n                            Deterministic\n                        </option>\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n    }\n}\n\nexport { ConstVar, NumRandVars, Saturation, Analysis };\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Navbar } from 'react-bootstrap'\n\nclass Header extends Component {\n    static propTypes = {\n        title: PropTypes.string\n    }\n\n    render() {\n        return (\n            <>\n                <Navbar className=\"navbar\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand className=\"navbar-brand\" href=\"#\">LISA</Navbar.Brand>\n                    <Navbar.Toggle />\n                    <Navbar.Collapse >\n                        <Navbar.Text>\n                            WSU Suction-Based LISA\n                        </Navbar.Text>\n                    </Navbar.Collapse>\n                </Navbar>\n            </>\n        )\n    }\n}\n\nexport default Header\n","var data = {\n    numVars: 1000,\n    conf: 'nondet',\n    sat: true,\n    randVars: {\n        c: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        c_r: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        phi: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        k_s: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        a: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        n: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        }\n    },\n    constVars: {\n        gamma: 0,\n        gamma_w: 0,\n        slope: 0,\n        flux: 0\n    },\n    z: {\n        max: 1,\n        step: 0.1\n    }\n}\n// use this normally\nvar results = {\n    randVars: {\n        c: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        c_r: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        phi: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        k_s: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        a: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        n: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        }\n    },\n    z: {}\n}\n// datasets to use while testing\nvar testing = {\n    data: {\n        numVars: 1000,\n        sat: false,\n        conf: 'nondet',\n        randVars: {\n            c: {\n                dist: 'truncnormal',\n                low: 0,\n                high: 4,\n                mean: 1.058,\n                stdev: 0.647\n            },\n            c_r: {\n                dist: 'constant',\n                const_val: 0\n            },\n            phi: {\n                dist: 'truncnormal',\n                low: 30,\n                high: 48.9,\n                mean: 36.055,\n                stdev: 3.058\n\n            },\n            k_s: {\n                dist: 'constant',\n                const_val: 1e-6\n            },\n            a: {\n                dist: 'truncnormal',\n                low: 0.002,\n                high: 0.45,\n                mean: 0.112,\n                stdev: 0.073\n            },\n            n: {\n                dist: 'lognormal',\n                low: 1.672,\n                high: 7.78,\n                logmean: 2.670,\n                logstdev: 0.270\n            }\n        },\n        constVars: {\n            gamma: 18,\n            gamma_w: 9.81,\n            slope: 45,\n            q: 0,\n            H_wt: 5,\n            z_step: 0.5\n        }\n    }\n}\n\nexport { data, results, testing }\n","import axios from 'axios'\n\nconst BASE_URL = 'http://127.0.0.1:8000'\n\nexport default axios.create({\n    baseURL: BASE_URL,\n    timeout: 20000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\n","const LABELS = {\n    c: 'C: Soil Cohesion (kPa)',\n    c_r: 'C_r: Root cohesion (kPa)',\n    phi: 'phi: Effective Angle of Friction (deg)',\n    k_s: 'k_s: Saturated Hydraulic Conductivity (m/s)',\n    a: 'alpha (1/kPa)',\n    n: 'n',\n    gamma: 'gamma: Soil Weight (kN/m3)',\n    gamma_w: 'gamma_w: Unit Weight of Water (kN/m3)',\n    slope: 'Beta: Slope (deg)',\n    q: 'q: Infiltration (m/s)',\n    H_wt: 'H_wt: Distance from surface to water table (m)',\n    z_step: 'Z Step: Used to calculate values to analysis values' +\n        'between 0 and H_wt (m)'\n}\n\nexport default LABELS\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/no-unescaped-entities */\nimport React, { Component, Fragment } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport * as Vars from './variables'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport { testing } from '../resources/template'\n// import { data } from '../resources/template\nimport AppMode from '../AppMode'\nimport API from './apiClient'\nimport LABELS from '../resources/labels'\n\n//  Random Variables:\n//    c, c_r, phi, k_s, a, n\n// Constant Variables:\n//    gamma, gamma_w, slope, z_step, H_wt\n// also, ask user for fluxes\n\nclass DataFormPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // data: data\n            data: testing.data\n        }\n    }\n\n    static propTypes = {\n        onSubmit: PropTypes.func,\n        apiClient: PropTypes.object,\n        changeMode: PropTypes.func\n    };\n\n    componentDidMount() {\n        if (this.state.data.conf === undefined) {\n            const newData = this.state.data\n            this.setState({ data: newData })\n        }\n    }\n\n    //  handling variable changes in data form when configuration\n    handleNondetChange = (varName, key, value) => {\n        // console.log(varName, key, value);\n        var newData = this.state.data\n        // console.log('old data:\\t', newData);\n        newData.randVars[varName][key] = value\n        // console.log('var:\\t', varName);\n        // console.log('\\tnew data:\\t', newData);\n        this.setState({ newData })\n    };\n\n    handleDetChange = (varName, val) => {\n        // console.log('handling Deterministic Change');\n        var newData = this.state.data\n        newData.randVars[varName].detVal = val\n        this.setState({ newData })\n    };\n\n    handleDistChange = (varName, selected) => {\n        var newData = this.state.data\n        newData.randVars[varName] = {\n            dist: selected,\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        }\n        this.setState(newData)\n        // console.log(varName, 'new dist is: ', selected);\n    };\n\n    handleConstVarChange = (varName, value) => {\n        var newData = this.state.data\n        newData.constVars[varName] = value\n        this.setState(newData)\n    };\n\n    handleNumVarChange = number => {\n        var newData = this.state.data\n        newData.numVars = number\n        this.setState(newData)\n    };\n\n    handleZVarChange = (key, val) => {\n        var newData = this.state.data\n        newData.z[key] = val\n        this.setState(newData)\n    };\n\n    handleSatChange = val => {\n        var newData = this.state.data\n        newData.sat = val\n        this.setState(newData)\n    };\n\n    handleAnalysisChange = val => {\n        var newData = this.state.data\n        newData.conf = val\n        this.setState(newData)\n    };\n\n    handleFluxChange = (key, val) => {\n        var newData = this.state.data\n        newData.constVars.flux[key] = val\n\n        this.setState(newData)\n    };\n\n    handleFluxAdd = () => {\n        var newData = this.state.data\n        newData.constVars.flux.append(0)\n        this.setState(newData)\n    };\n\n    handleFluxRemove = index => {\n        var newData = this.state.data\n        if (index > -1) {\n            newData.constVars.flux.splice(index, 1)\n        }\n        this.setState(newData)\n    };\n\n    onSubmit = e => {\n        console.log(\n            \"submit has been clicked. attempting to post to '/api/add_data'\"\n        )\n        console.log('data being sent: ', this.state.data)\n        e.preventDefault()\n        API.post('/api/add_data', this.state.data).then(res => {\n            console.log(res)\n            this.props.changeMode(AppMode.DISPLAY)\n        })\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Header title=\"Data Form\" />\n                <div className=\"paddedPage\">\n                    <div className=\"myForm\">\n                        <Form>\n                            {/* <Form.Row>\n                                <Vars.Saturation\n                                    handleChange={this.handleSatChange}\n                                />\n                                <Vars.Analysis\n                                    handleChange={this.handleAnalysisChange}\n                                />\n                                <Vars.NumRandVars\n                                    handleChange={this.handleNumVarChange}\n                                />\n                            </Form.Row>\n                            <Form.Row>\n                                <DataFormSelector\n                                    data={this.state.data}\n                                    handleNondetChange={this.handleNondetChange}\n                                    handleDetChange={this.handleDetChange}\n                                    handleDistChange={this.handleDistChange}\n                                    handleConstVarChange={\n                                        this.handleConstVarChange\n                                    }\n                                    handleZVarChange={this.handleZVarChange}\n                                />\n                            </Form.Row> */}\n\n                            <Button variant=\"primary\" onClick={this.onSubmit}>\n                                {' '}\n                                Submit{' '}\n                            </Button>\n                        </Form>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nclass DataFormSelector extends Component {\n    static propTypes = {\n        handleNondetChange: PropTypes.func,\n        handleDetChange: PropTypes.func,\n        handleDistChange: PropTypes.func,\n        handleConstVarChange: PropTypes.func,\n        handleZVarChange: PropTypes.func,\n        handleFluxChange: PropTypes.func,\n        handleFluxRemove: PropTypes.func\n    };\n\n    render() {\n        const sat = this.props.data.sat\n        const conf = this.props.data.conf\n        console.log('sat=', sat)\n        console.log('conf=', conf)\n        if (sat === false) {\n            return (\n                <Fragment>\n                    <div className=\"rand-vars\">\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c}\n                            conf={conf}\n                            name=\"c\"\n                            label={LABELS.c}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c_r}\n                            conf={conf}\n                            name=\"c_r\"\n                            label={LABELS.c_r}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.phi}\n                            conf={conf}\n                            name=\"phi\"\n                            label={LABELS.phi}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.k_s}\n                            conf={conf}\n                            name=\"k_s\"\n                            label={LABELS.k_s}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.a}\n                            conf={conf}\n                            name=\"a\"\n                            label={LABELS.a}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n                        <Vars.RandVar\n                            data={this.props.data.randVars.n}\n                            conf={conf}\n                            name=\"n\"\n                            label={LABELS.n}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n                    </div>\n\n                    <div className=\"const-vars\">\n                        <Vars.ConstVar\n                            name=\"gamma\"\n                            label={LABELS.gamma}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"gamma_w\"\n                            label={LABELS.gamma_w}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"slope\"\n                            label={LABELS.slope}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"q\"\n                            label={LABELS.q}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        {/* <Vars.FluxVar\n                            name=\"flux\"\n                            label={LABELS.q}\n                            handleRemove={this.handleFluxRemove}\n                            handleChange={this.handleFluxChange}\n                            handleAdd={this.handleAdd}\n                        /> */}\n                        <Vars.ConstVar\n                            name=\"H_wt\"\n                            label={LABELS.H_wt}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"z_step\"\n                            label={LABELS.z_step}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        {/* <ZVar handleChange={this.props.handleZVarChange} /> */}\n                    </div>\n                </Fragment>\n            )\n        } else if (sat === true) {\n            return (\n                <Fragment>\n                    <div className=\"rand-vars\">\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c}\n                            conf={conf}\n                            name=\"c\"\n                            label={LABELS.c}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c_r}\n                            conf={conf}\n                            name=\"c_r\"\n                            label={LABELS.c_r}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.phi}\n                            conf={conf}\n                            name=\"phi\"\n                            label={LABELS.phi}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n                    </div>\n\n                    <div className=\"const-vars\">\n                        <Vars.ConstVar\n                            name=\"gamma\"\n                            label={LABELS.gamma}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"gamma_w\"\n                            label={LABELS.gamma_w}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"slope\"\n                            label={LABELS.slope}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"H_wt\"\n                            label={LABELS.H_wt}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"z_step\"\n                            label={LABELS.z_step}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        {/* <ZVar handleChange={this.props.handleZVarChange} /> */}\n                    </div>\n                </Fragment>\n            )\n        } else {\n            return <h3>Error: invalid configuration</h3>\n        }\n    }\n}\n\nexport default DataFormPage\n","const UNITS = {\n    c: 'kPa',\n    c_r: 'kPa',\n    phi: 'deg',\n    k_s: 'm/s',\n    a: \"1/kPa\",\n    n: \"\",\n    gamma: 'kN/m3',\n    gamma_w: 'kN/m3',\n    slope: 'deg',\n    q: 'm/s',\n    H_wt: 'm',\n    z_step: 'm',\n};\n\nexport default UNITS\n","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\nimport Select from 'react-select'\nimport UNITS from '../../resources/units'\n\n// NON-DET data looks like:\n/*\nrandVars: {\n    \"a\": {\n        \"high\": _,\n        \"low\": _,\n        \"mean\": _,\n        \"stdev\": _,\n        \"vals\": [...]\n    },\n    \"c\": {...},\n    \"c_r\": {...},\n    ...\n}\n*/\n// DET data looks like\n/*\n    {\n        conf: 'det',\n        sat: False,\n        randVars: {\n            \"a\" 1,\n            ...\n        }\n    }\n\n*/\n\nclass RVDistGraph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected: ''\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string\n    };\n\n    setOptions = () => {\n        const options = []\n        for (const key in this.props.data) {\n            options.push({ value: key, label: key })\n        }\n        return options\n    };\n\n    handleChange = e => {\n        // console.log('in handlechange');\n        // console.log(e);\n        const selected = e.value\n        // console.log('selected: ', selected);\n        this.setState({\n            selected: selected\n        })\n    };\n\n    render() {\n        const selectedOption = this.state.selected\n        // console.log('selected: ', selectedOption)\n        const options = this.setOptions()\n        // console.log(options);\n\n        const curData = this.props.data[selectedOption]\n        console.log('RVDistGraph curdata: ', curData)\n        return (\n            <Fragment>\n                <div className=\"dropdown\">\n                    <Select\n                        // defaultValue={options[0]}\n                        selectedOption={this.state.selected}\n                        options={options}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                {selectedOption !== '' ? (\n                    <>\n                        <RVBar\n                            data={this.props.data}\n                            rv={selectedOption}\n                            conf={this.props.conf}\n                        />\n                    </>\n                ) : (\n                    <></>\n                )}\n            </Fragment>\n        )\n    }\n}\n\n// NON-DET\n// data looks like\n/*\nrandVars: {\n    \"a\": {\n        \"high\": _,\n        \"low\": _,\n        \"mean\": _,\n        \"stdev\": _,\n        \"vals\": [...]\n    },\n    \"c\": {...},\n    \"c_r\": {...},\n    ...\n}\n*/\n\n// DET data looks like\n/*\n    {\n        conf: 'det',\n        sat: False,\n        randVars: {\n            \"a\" 1,\n            ...\n        }\n    }\n*/\nclass RVBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: [],\n            rv: ''\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        rv: PropTypes.string,\n        conf: PropTypes.string\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // console.log('\\t--RVBar getDerivedStateFromProps');\n        // console.log('parent changed, updating state');\n        if (nextProps.rv !== prevState.rv) {\n            if (nextProps.conf === 'nondet') {\n                const valsArr = nextProps.data[nextProps.rv].vals\n                // console.log('\\nvalsArr: ');\n                // console.log(valsArr);\n                const freqObj = {}\n                valsArr.forEach(x => {\n                    if (nextProps.rv === 'k_s') {\n                        // console.log('special case for k_s');\n                        const rounded = x.toExponential(2)\n                        console.log('rounded = ', rounded)\n                        if (!freqObj[rounded]) {\n                            freqObj[rounded] = 1\n                        } else {\n                            freqObj[rounded] += 1\n                        }\n                    } else {\n                        let rounded = 0.0\n                        rounded = x.toFixed(2)\n                        if (!freqObj[rounded]) {\n                            freqObj[rounded] = 1\n                        } else {\n                            freqObj[rounded] += 1\n                        }\n                    }\n                })\n\n                const datapoints = []\n                for (const key in freqObj) {\n                    datapoints.push({ x: Number(key), y: freqObj[key] })\n                }\n                // this.setState({ datapoints: datapoints })\n                return { datapoints: datapoints, rv: nextProps.rv }\n            } else if (nextProps.conf === 'det') {\n                var val = nextProps.data[nextProps.rv]\n                if (nextProps.rv !== 'k_s') {\n                    val = val.toFixed(2)\n                } else {\n                    val = val.toExponential(2)\n                }\n                const datapoints = [{ x: Number(val), y: 1 }]\n                return { datapoints: datapoints, rv: nextProps.rv }\n            } else {\n                console.log('ERROR: invalid conf: ', nextProps.conf)\n            }\n        } else return null\n    }\n\n    getTickFormat = t => {\n        const rv = this.state.rv\n        if (rv === 'k_s') {\n            return t.toExponential(2)\n        } else if (rv === 'c' || rv === 'c_r' || rv === 'phi') {\n            return t.toFixed(1)\n        } else if (rv === 'a' || rv === 'n') {\n            return t.toFixed(3)\n        } else return t\n    };\n\n    render() {\n        // const l = `${this.state.rv} Distribution`;\n        // console.log(l);\n        var dist = null\n        if (this.props.conf === 'nondet') {\n            dist = <h5>{this.props.data[this.state.rv].dist}</h5>\n        }\n        return (\n            <div className=\"graph\">\n                <h4>Distribution Graph for {this.state.rv}</h4>{' '}\n                {dist !== null ? dist : null}\n                <V.VictoryChart\n                    domainPadding={20}\n                    overflow=\"visible\"\n                    theme={V.VictoryTheme.material}\n                    containerComponent={\n                        <V.VictoryVoronoiContainer\n                            labels={({ datum }) => `${datum.x} ${datum.y}`}\n                        />\n                    }\n                >\n                    <V.VictoryBar\n                        // style={{ data:}}\n                        data={this.state.datapoints}\n                    />\n                    <V.VictoryAxis\n                        label={UNITS[this.state.rv]}\n                        style={{\n                            axisLabel: { padding: 30 }\n                        }}\n                        tickFormat={t => this.getTickFormat(t)}\n                        tickCount={this.props.conf === 'det' ? 1 : null}\n                    />\n\n                    <V.VictoryAxis\n                        dependentAxis\n                        label=\"Count\"\n                        style={{\n                            axisLabel: { padding: 40 }\n                        }}\n                    />\n                </V.VictoryChart>\n            </div>\n        )\n    }\n}\n\nexport default RVDistGraph\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\nimport Select from 'react-select'\n\nclass FOSFreq extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: [],\n            selected: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string\n    };\n\n    componentDidMount = () => {\n        // this.initComp(this.)\n    };\n\n    setOptions = () => {\n        // console.log('~~~~ FreqFrequency setOptions ~~~~');\n        const options = []\n\n        // sort options\n\n        var sorted = []\n        for (const key in this.props.data) {\n            sorted.push(key)\n        }\n\n        sorted.sort()\n        sorted.forEach(e => {\n            options.push({ value: e, label: e })\n        })\n\n        return options\n    };\n\n    handleChange = e => {\n        // e.preventDefault()\n        // console.log(e)\n        this.setState({\n            selected: e.value\n        })\n    };\n\n    render() {\n        // console.log(this.props.data)\n        console.log('~~~~ FOSFreq ~~~~')\n        // console.log('current configuration: ', this.props.conf);\n        const options = this.setOptions()\n        // console.log(options);\n\n        // console.log('currently selected z = ', this.state.selected);\n        // console.log('current data in FOSFrequency: ', this.state.data);\n\n        return (\n            <div>\n                {/* <h4> Frequency histogram of the factor of safety values </h4> */}\n                <div className=\"dropdown\">\n                    <Select\n                        selectedOption={this.state.selected}\n                        options={options}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                {this.state.selected !== '' ? (\n                    <>\n                        <FreqHistFOS\n                            z={this.state.selected}\n                            data={this.props.data}\n                            conf={this.props.conf}\n                        />\n                    </>\n                ) : (\n                        <></>\n                    )}\n            </div>\n        )\n    }\n}\n\nclass FreqHistFOS extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: [],\n            z: ''\n        }\n        // this.getData = this.getData.bind(this)\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string,\n        z: PropTypes.string\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // console.log('~~~~FreqHistFOS getDerivedStateFromProps~~~~');\n        // console.log('next state: ', nextProps);\n        // console.log('prex z: ', prevState.z);\n        // console.log('next z: ', nextProps.z);\n        if (nextProps.z !== prevState.z) {\n            const z = nextProps.z\n            // we need to make frequency array\n            // for current Z, get fos counts\n            // console.log(\n            //     'in getDerivedStateFromProps()  current data= ',\n            //     nextProps.data\n            // );\n            if (nextProps.conf === 'nondet') {\n                // console.log('non-deterministic');\n                const valsArr = nextProps.data[z].fs_vals\n\n                // console.log('vals array: ');\n                // console.log(valsArr);\n                const freqObj = {}\n                valsArr.forEach(x => {\n                    const rounded = x.toFixed(2)\n                    if (!freqObj[rounded]) {\n                        freqObj[rounded] = 1\n                    } else {\n                        freqObj[rounded] += 1\n                    }\n                })\n\n                const datapoints = []\n                for (const key in freqObj) {\n                    datapoints.push({ x: Number(key), y: freqObj[key] })\n                }\n                // this.setState({ datapoints: datapoints })\n                return { datapoints: datapoints, z: nextProps.z }\n            } else if (nextProps.conf === 'det') {\n                // console.log('deterministic');\n                const val = nextProps.data[z].toFixed(2)\n\n                // console.log('value = ', val);\n                const datapoint = [{ x: Number(z), y: val }]\n                // console.log('new datapoint: ', datapoint);\n                return { datapoints: datapoint, z: nextProps.z }\n            } else {\n                console.log(\n                    'ERROR: incorrect configuration type: ',\n                    nextProps.conf\n                )\n            }\n        } else return null\n    }\n\n    getCount = () => {\n        var max = 0\n        const dp = this.state.datapoints\n        dp.forEach(x => {\n            if (x.y > max) {\n                console.log('new max: ', x.y)\n                max = x.y\n            }\n        })\n\n        // example: max = 41\n        // want [5, 10, 15, 20, 25, 30, 35, 40]\n        const list = []\n        for (var i = 0; i < max; i++) {\n            if (i % 5 === 0) {\n                list.push(i)\n            }\n        }\n        return list\n    };\n\n    render() {\n        // const width = this.props.data[Number(this.props.z)].high\n        // const dp = this.getData()\n        // console.log('rendering child!');\n\n        // console.log(this.state.datapoints);\n\n        return (\n            <div className=\"graph\">\n                <V.VictoryChart\n                    theme={V.VictoryTheme.material}\n                    domainPadding={20}\n                    containerComponent={\n                        <V.VictoryVoronoiContainer\n                            labels={({ datum }) => `${datum.x} ${datum.y}`}\n                        />\n                    }\n                >\n                    <V.VictoryBar data={this.state.datapoints} />\n                    <V.VictoryAxis\n                        label=\"Factor of Safety\"\n                        tickValues={[1]}\n                        tickFormat={t => t}\n                        style={{\n                            axisLabel: { padding: 30 }\n                        }}\n                    />\n                    <V.VictoryAxis\n                        dependentAxis\n                        label=\"Frequency\"\n                        tickCount={this.getCount().length}\n                        style={{\n                            axisLabel: { padding: 40 }\n                        }}\n                    />\n                </V.VictoryChart>\n            </div>\n        )\n    }\n}\n\nexport default FOSFreq\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\n\nclass PFbyZ extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: [],\n            tickValues: []\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string,\n        H_wt: PropTypes.number\n    };\n\n    detGetDatapoints = () => {\n        const data = this.props.data\n        const dp = []\n        for (const key in data) {\n            if (data[key] >= 1) {\n                dp.push({ x: 1, y: key })\n            } else {\n                dp.push({ x: 0, y: key })\n            }\n        }\n        return dp\n    };\n\n    componentDidMount = () => {\n        const vals = this.props.data\n        var dp = []\n        if (this.props.conf === 'nondet') {\n            for (const key in vals) {\n                console.log('H_ss val = ', key)\n                console.log('probFail = ', vals[key].probFail)\n                dp.push({ x: vals[key].probFail, y: key })\n            }\n        } else if (this.props.conf === 'det') {\n            dp = this.detGetDatapoints()\n        }\n        const ticks = this.getTickVals()\n        this.setState({ datapoints: dp, tickValues: ticks })\n    };\n\n    getTickVals = () => {\n        const max = this.props.H_wt\n        const ticks = []\n        var cur = 0\n        while (cur <= max) {\n            ticks.push(cur)\n            cur += 0.5\n        }\n        console.log('TICKS!!    ')\n        console.log(ticks)\n        return ticks\n    }\n\n    printTicks(t) {\n        console.log('cur t: ', t)\n        if (Number(t) % 1 === 0) {\n            console.log('tick IS whole num: ', t)\n            return Number(t)\n        } else {\n            console.log('tick is not whole number:  ', t)\n            return null\n        }\n    }\n\n    render() {\n        console.log('~~~~ PFbyZ GRAPH ~~~~')\n        // console.log('data: ', this.props.data);\n        const dp = this.state.datapoints\n        console.log('current datapoints: ')\n        console.log(dp)\n        // const ticks = Array.from(this.getTickVals())\n        // console.log(\"What the ticks should be: \")\n\n        const sharedAxisStyles = {\n            tickLabels: {\n                fontSize: 12\n            },\n            axisLabel: {\n                padding: 39,\n                fontSize: 12,\n                fontStyle: 'bold'\n            }\n        }\n        if (dp.length > 0) {\n            // if (this.props.conf === 'nondet') {\n            return (\n                <div className=\"graph\">\n                    <h4>Depth vs. Probability of Failure</h4>\n                    <V.VictoryChart\n                        domainPadding={20}\n                        theme={V.VictoryTheme.material}\n                        containerComponent={\n                            <V.VictoryVoronoiContainer\n                                labels={({ datum }) => `${datum.x} ${datum.y}`}\n                            />\n                        }\n                    >\n                        <V.VictoryLine\n                            style={{\n                                data: { stroke: '#c43a31' },\n                                parent: { border: '1px solid #ccc' }\n                            }}\n                            data={dp} />\n                        <V.VictoryAxis\n                            label=\"Probability of Failure\"\n                            style={sharedAxisStyles}\n                            orientation=\"top\"\n                            tickValues={[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\n                        />\n                        <V.VictoryAxis\n                            dependentAxis\n                            label=\"Soil Depth from surface, H_ss (m)\"\n                            tickCount={this.props.H_wt + 1}\n                            tickFormat={t => t}\n\n                            // tickCount={\n                            //     this.props.H_wt * 2\n                            //     // this.state.datapoints.length > 10\n                            //     //     ? this.state.datapoints.length / 2\n                            //     //     : this.state.datapoints.length\n                            // }\n                            style={sharedAxisStyles}\n                            invertAxis={true}\n                        />\n                    </V.VictoryChart>\n                </div>\n            )\n            // } else if (this.props.conf === 'det') {\n            //     return (\n            //         <V.VictoryChart\n            //             domainPadding={20}\n            //             theme={V.VictoryTheme.material}\n            //             containerComponent={\n            //                 <V.VictoryVoronoiContainer\n            //                     labels={({ datum }) => `${datum.x} ${datum.y}`}\n            //                 />\n            //             }\n            //         >\n            //             <V.VictoryScatter data={dp} horizontal />\n            //             <V.VictoryAxis\n            //                 label=\"Z:Depth (m)\"\n            //                 tickCount={\n            //                     this.state.datapoints.length > 10\n            //                         ? this.state.datapoints.length / 2\n            //                         : this.state.datapoints.length\n            //                 }\n            //                 style={{ axisLabel: { padding: 40 } }}\n            //             />\n            //             <V.VictoryAxis\n            //                 dependentAxis\n            //                 label=\"Probability of Failure\"\n            //                 style={{\n            //                     axisLabel: { padding: 30 },\n            //                 }}\n            //             />\n            //         </V.VictoryChart>\n            //     );\n            // }\n        } else {\n            return <h2>no datapoints</h2>\n        }\n    }\n}\n\nexport default PFbyZ\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\n\nclass SSbyZ extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: []\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string,\n        sat: PropTypes.bool,\n        H_wt: PropTypes.number\n    };\n\n    componentDidMount = () => {\n        console.log('SSbyZ mounted!')\n        console.log('sat = ', this.props.sat)\n        if (this.props.sat === false) {\n            console.log('SSbyZ Mounting component with unsaturated soil')\n            const vals = this.props.data\n            console.log(vals)\n            var dp = []\n            if (this.props.conf === 'nondet') {\n                for (const z in vals) {\n                    dp.push({ x: -vals[z].ss, y: z })\n                    // for (const ss in vals[z].ss_vals) {\n                    //     dp.push({ x: vals[z].ss_vals[ss], y: z });\n                    // }\n                }\n            } else if (this.props.conf === 'det') {\n                for (const z in vals) {\n                    dp.push({ x: -vals[z].ss, y: z })\n                }\n            }\n\n            console.log(dp)\n            this.setState({ datapoints: dp })\n        }\n    };\n\n    render() {\n        console.log('~~~~ SSbyZ GRAPH ~~~~')\n\n        const sat = this.props.sat\n\n        if (sat === true) {\n            return (\n                <h2>\n                    This graph is only available for unsaturated soil analysis\n                </h2>\n            )\n        }\n\n        // console.log('data: ', this.props.data);\n        const dp = this.state.datapoints\n        console.log('current datapoints: ')\n        console.log(dp)\n        console.log(dp.length)\n        if (dp.length > 0) {\n            const ticks = [...Array(Math.ceil(this.props.H_wt)).keys()]\n            console.log(ticks)\n\n            return (\n                <div className=\"graph\">\n                    <h4>Depth vs. Suction Stress</h4>\n                    <V.VictoryChart\n                        domainPadding={20}\n                        theme={V.VictoryTheme.material}\n                        containerComponent={\n                            <V.VictoryVoronoiContainer\n                                labels={({ datum }) => `${datum.x} ${datum.y}`}\n                            />\n                        }\n                    >\n                        <V.VictoryLine\n                            style={{\n                                data: { stroke: '#c43a31' },\n                                parent: { border: '1px solid #ccc' }\n                            }}\n                            data={dp}\n                            // get x min with func\n                            domain={{ x: [0, 10], y: [0, this.props.H_wt] }}\n                            interpolation=\"natural\"\n                        />\n                        <V.VictoryAxis\n                            label=\"Suction Stress (-kPa)\"\n                            style={{\n                                axisLabel: { padding: 30 }\n                            }}\n                            orientation=\"top\"\n                        />\n                        <V.VictoryAxis\n                            dependentAxis\n                            label=\"Soil Depth from Surface H_ss (m)\"\n                            tickCount={this.props.H_wt}\n                            tickFormat={t => t}\n                            style={{\n                                axisLabel: { padding: 40 }\n                            }}\n                        // invertAxis={true}\n                        />\n                    </V.VictoryChart>\n                </div>\n            )\n        } else {\n            return <h2>no datapoints</h2>\n        }\n    }\n}\n\nexport default SSbyZ\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\n\nclass SSbySe extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: []\n        }\n    }\n\n    static propTypes = {\n        sat: PropTypes.bool,\n        H_wt: PropTypes.number,\n        conf: PropTypes.string,\n        data: PropTypes.object\n    }\n\n    componentDidMount = () => {\n        console.log('SSbySe mounted!')\n        console.log('sat = ', this.props.sat)\n        if (this.props.sat === false) {\n            console.log('SSbySe Mounting component with unsaturated soil')\n            const vals = this.props.data\n            console.log(vals)\n            var dp = []\n            for (const z in vals) {\n                dp.push({ x: vals[z].Se, y: -vals[z].ss })\n            }\n        }\n\n        console.log(dp)\n        this.setState({ datapoints: dp })\n    };\n\n    render() {\n        console.log('~~~~ SSbySe GRAPH ~~~~')\n\n        const sat = this.props.sat\n\n        if (sat === true) {\n            return (\n                <h2>\n                    This graph is only available for unsaturated soil analysis\n                </h2>\n            )\n        }\n\n        // console.log('data: ', this.props.data);\n        const dp = this.state.datapoints\n        console.log('current datapoints: ')\n        console.log(dp)\n        console.log(dp.length)\n        if (dp.length > 0) {\n            const ticks = [...Array(Math.ceil(this.props.H_wt)).keys()]\n            console.log(ticks)\n\n            return (\n                <div className=\"graph\">\n                    <h4>Suction Stress vs Se</h4>\n                    <V.VictoryChart\n                        domainPadding={20}\n                        theme={V.VictoryTheme.material}\n                        containerComponent={\n                            <V.VictoryVoronoiContainer\n                                labels={({ datum }) => `${datum.x} ${datum.y}`}\n                            />\n                        }\n                    >\n                        <V.VictoryLine\n                            style={{\n                                data: { stroke: '#c43a31' },\n                                parent: { border: '1px solid #ccc' }\n                            }}\n                            data={dp}\n                            // get x min with func\n                            domain={{ x: [0, 1], y: [0, 10] }}\n                            interpolation=\"natural\"\n                        />\n                        <V.VictoryAxis\n                            label=\"Se\"\n                            tickCount={10}\n                            style={{\n                                axisLabel: { padding: 30 }\n                            }}\n                        />\n                        <V.VictoryAxis\n                            dependentAxis\n                            label=\"Suction Stress (-kPa)\"\n                            tickCount={this.props.H_wt + 1}\n                            tickFormat={t => t}\n                            style={{\n                                axisLabel: { padding: 40 }\n                            }}\n                        // invertAxis={true}\n                        />\n                    </V.VictoryChart>\n                </div>\n            )\n        } else {\n            return <h2>no datapoints</h2>\n        }\n    }\n}\n\nexport default SSbySe\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport * as Graphs from './graphs';\n\nclass DisplayGraphs extends Component {\n    static propTypes = {\n        data: PropTypes.object,\n        apiClient: PropTypes.object,\n    };\n\n    render() {\n        console.log('~~~~! DisplayGraphs data: ', this.props.data);\n        return (\n            <div>\n                <Tabs defaultActiveKey=\"probFail/z\" id=\"visualizations\">\n                    <Tab\n                        eventKey=\"freqHistFos\"\n                        title=\"Factor of Safety Frequency Histograms\"\n                    >\n                        <Graphs.FOSFreq\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                        />\n                    </Tab>\n                    <Tab\n                        eventKey=\"freqHistRV\"\n                        title=\"Random Variable Frequency Histograms\"\n                    >\n                        <Graphs.RVDist\n                            data={this.props.data.randVars}\n                            conf={this.props.data.conf}\n                        />\n                    </Tab>\n\n                    <Tab\n                        eventKey=\"probFail/z\"\n                        title=\"Depth vs. Probability of Failure\"\n                    >\n                        <Graphs.PFbyZ\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                            H_wt={this.props.data.H_wt}\n                        />\n                    </Tab>\n                    <Tab eventKey=\"ss/z\" title=\"Depth vs. Suction Stress\">\n                        <Graphs.SSbyZ\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                            sat={this.props.data.sat}\n                            H_wt={this.props.data.H_wt}\n                        />\n                    </Tab>\n                    <Tab eventKey=\"ss/Se\" title=\"Suction Stress vs. Se\">\n                        <Graphs.SSbySe\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                            sat={this.props.data.sat}\n                            H_wt={this.props.data.H_wt}\n                        />\n                    </Tab>\n                </Tabs>\n                <ul></ul>\n            </div>\n        );\n    }\n}\n\nexport default DisplayGraphs;\n","import React, { Component } from 'react'\nimport PropType from 'prop-types'\nimport { Table } from 'react-bootstrap'\n\nclass FOSTable extends Component {\n    static propTypes = {\n        data: PropType.object,\n        conf: PropType.string\n    };\n\n    getRows = conf => {\n        var list = []\n        var sortedZ = []\n\n        for (const key in this.props.data) {\n            // console.log(key)\n            sortedZ.push(key)\n        }\n        sortedZ.sort()\n        for (var key in sortedZ) {\n            var i = sortedZ[key]\n            // console.log(i)\n            if (conf === 'nondet') {\n                list.push(\n                    <FSRowDisplay\n                        key={i}\n                        z={i}\n                        data={this.props.data[i]}\n                        conf={conf}\n                    />\n                )\n            } else if (conf === 'det') {\n                list.push(\n                    <FSRowDisplay\n                        key={i}\n                        z={i}\n                        val={this.props.data[i]}\n                        conf={conf}\n                    />\n                )\n            }\n        }\n        return list\n    };\n\n    render() {\n        const conf = this.props.conf\n        console.log('in FOSTable. conf = ', conf)\n\n        if (conf === 'nondet') {\n            return (\n                <div className=\"paddedPage displayTable\">\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Z</th>\n                                <th>FS Low</th>\n                                <th>FS High</th>\n                                <th>FS Mean</th>\n                                <th>FS Stdev</th>\n                                <th>Probability of Failure</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(conf)}</tbody>\n                    </Table>\n                </div>\n            )\n        } else if (conf === 'det') {\n            return (\n                <div className=\"paddedPage displayTable\">\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Z</th>\n                                <th>Value</th>\n                                <th>Probability of Failure</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(conf)}</tbody>\n                    </Table>\n                </div>\n            )\n        } else {\n            return <p>Error: invalid conf value - {conf}</p>\n        }\n    }\n}\n\nclass FSRowDisplay extends React.Component {\n    static propTypes = {\n        data: PropType.object,\n        z: PropType.string,\n        conf: PropType.string,\n        val: PropType.number\n    };\n\n    render() {\n        if (this.props.conf === 'nondet') {\n            return (\n                <tr>\n                    <td>\n                        {' '}\n                        <b>{this.props.z}</b>\n                    </td>\n                    <td>{this.props.data.low}</td>\n                    <td>{this.props.data.high}</td>\n                    <td>{this.props.data.mean}</td>\n                    <td>{this.props.data.stdev}</td>\n                    <td>{this.props.data.probFail}</td>\n                </tr>\n            )\n        } else if (this.props.conf === 'det') {\n            return (\n                <tr>\n                    <td>\n                        {' '}\n                        <b>{this.props.z}</b>\n                    </td>\n                    <td>{this.props.val}</td>\n            <td>{this.props.val < 1 ? 0 : 1}</td>\n                </tr>\n            )\n        } else {\n            return <p>Error: invalid analysis type</p>\n        }\n    }\n}\n\nexport default FOSTable\n","import React, { Component, Fragment } from 'react';\nimport PropType from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport LABELS from '../../resources/labels';\n\nclass RVTable extends Component {\n    static propTypes = {\n        data: PropType.object,\n        sat: PropType.bool,\n        conf: PropType.string,\n    };\n\n    detRows = sat => {\n        if (sat === true) {\n            return (\n                <Fragment>\n                    <RandVarRowDisplayDet\n                        data={this.props.data.c}\n                        label={LABELS.c}\n                    />\n                    <RandVarRowDisplayDet\n                        data={this.props.data.c_r}\n                        label={LABELS.c_r}\n                    />\n                    <RandVarRowDisplayDet\n                        data={this.props.data.phi}\n                        label={LABELS.phi}\n                    />\n                </Fragment>\n            );\n        } else if (sat === false) {\n            return (\n                <Fragment>\n                    <RandVarRowDisplayDet\n                        data={this.props.data.c}\n                        label={LABELS.c}\n                    />\n                </Fragment>\n            );\n        }\n    };\n\n    getRows = (vars, conf) => {\n        const list = [];\n        console.log('data: ', this.props.data);\n        for (let key in vars) {\n            key = vars[key];\n            var i = this.props.data[key];\n            console.log('key: ', key);\n\n            if (conf === 'det') {\n                console.log('i: ', i);\n                list.push(\n                    <RandVarRowDisplayDet\n                        key={key}\n                        rv={key}\n                        value={this.props.data[key]}\n                        label={LABELS[key]}\n                    />\n                );\n            } else if (conf === 'nondet') {\n                console.log('my key here is ', key);\n                list.push(\n                    <RandVarRowDisplayNondet\n                        key={key}\n                        rv={key}\n                        data={this.props.data[key]}\n                        label={LABELS[key]}\n                    />\n                );\n            } else {\n                list.push(<p>Error: invalid Analysis Type</p>);\n            }\n        }\n        return list;\n    };\n\n    getTable = (sat, conf) => {\n        var vars = [];\n\n        sat === true\n            ? (vars = ['c', 'c_r', 'phi'])\n            : (vars = ['c', 'c_r', 'phi', 'k_s', 'a', 'n']);\n\n        if (conf === 'det') {\n            return (\n                <Fragment>\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Random Variable</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(vars, conf)}</tbody>\n                    </Table>\n                </Fragment>\n            );\n        } else if (conf === 'nondet') {\n            return (\n                <Fragment>\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Random Variable</th>\n                                <th>Low</th>\n                                <th>High</th>\n                                <th>Mean</th>\n                                <th>Stdev</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(vars, conf)}</tbody>\n                    </Table>\n                </Fragment>\n            );\n        }\n    };\n\n    render() {\n        console.log('IN RVTABLE. data = ', this.props.data);\n        const sat = this.props.sat;\n        const conf = this.props.conf;\n        console.log('sat: ', sat);\n        console.log('conf: ', conf);\n        const table = this.getTable(sat, conf);\n        return (\n            <Fragment>\n                <div className=\"paddedPage\">\n                    <div className=\"displayTable\">{table}</div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nclass RandVarRowDisplayDet extends Component {\n    static propTypes = {\n        value: PropType.number,\n        label: PropType.string,\n        key: PropType.string,\n    };\n\n    render() {\n        if (this.props.key === 'k_s') {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{this.props.value.toExponential(2)}</td>\n                </tr>\n            );\n        } else {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{this.props.value}</td>\n                </tr>\n            );\n        }\n    }\n}\n\nclass RandVarRowDisplayNondet extends React.Component {\n    static propTypes = {\n        data: PropType.object,\n        label: PropType.string,\n        rv: PropType.string,\n    };\n\n    render() {\n        console.log('rv is ', this.props.rv);\n        if (this.props.rv === 'k_s') {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{Number(this.props.data.low).toExponential(2)}</td>\n                    <td>{Number(this.props.data.high).toExponential(2)}</td>\n                    <td>{Number(this.props.data.mean).toExponential(2)}</td>\n                    <td>{Number(this.props.data.stdev).toExponential(2)}</td>\n                </tr>\n            );\n        } else {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{this.props.data.low}</td>\n                    <td>{this.props.data.high}</td>\n                    <td>{this.props.data.mean}</td>\n                    <td>{this.props.data.stdev}</td>\n                </tr>\n            );\n        }\n    }\n}\n\nexport default RVTable;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport FadeIn from 'react-fade-in'\nimport Lottie from 'react-lottie'\nimport ReactLoading from 'react-loading'\nimport * as animationData from '../resources/24817-tiktok-loader.json'\nimport * as doneData from '../resources/24847-confirmation.json'\n\nclass Loading extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: undefined,\n            done: undefined\n        }\n    }\n\n    static propTypes = {\n        loading: PropTypes.bool\n    }\n\n    render() {\n        const defaultOptions = {\n            loop: true,\n            autoplay: true,\n            animationData: animationData.default,\n            rendererSettings: {\n                preserveAspectRatio: 'xMidYMid slice'\n            }\n        }\n\n        const defaultOptions2 = {\n            loop: false,\n            autoplay: true,\n            animationData: doneData.default,\n            rendererSettings: {\n                preserveAspectRatio: 'xMidYMid slice'\n            }\n        }\n        return (\n            <FadeIn>\n                <div className=\"d-flex justify-content'-center align-items-center\">\n                    <h1>fetching results</h1>\n                    {!this.props.loading ? (\n                        <Lottie options={defaultOptions} height={120} width={120} />\n                    ) : (\n                            <Lottie options={defaultOptions2} height={120} width={120} />\n                        )}\n                </div>\n            </FadeIn>\n        )\n    }\n}\n\nexport default Loading\n","/* eslint-disable react/no-unescaped-entities */\nimport React, { Component, Fragment } from 'react'\nimport PropType from 'prop-types'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Header from './Header'\nimport DisplayGraphs from './DisplayGraphs'\nimport API from './apiClient'\nimport * as Tables from './tables'\nimport Loading from './Loading'\n\nclass DisplayPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null,\n            loading: undefined,\n            done: undefined\n            // data: testing.results\n        }\n    }\n\n    static propTypes = {\n        apiClient: PropType.object\n    };\n\n    // componentDidMount = () => {\n    //     console.log('getting results...')\n    //     API.get('/api/display').then(res => {\n    //         console.log(res)\n    //         console.log(res.data)\n    //         const results = res.data.results[1]\n\n    //         console.log('rounding results to appropriate significant figures')\n\n    //         this.roundResults(results)\n    //         console.log('setting results as state: ', results)\n    //         this.setState({ data: results })\n    //     })\n    // };\n\n    // roundResults = res => {\n    //     console.log('In roundResults. res = ', res)\n    //     // rounding randVars correctly\n    //     // arrs for each significant figure\n    //     const one = ['c', 'c_r', 'phi']\n    //     const three = ['a', 'n']\n    //     const enTwo = ['k_s']\n    //     // collect keys from randVar obj\n    //     const keys = []\n    //     for (const key in res.randVars) {\n    //         // eslint-disable-next-line no-prototype-builtins\n    //         if (res.randVars.hasOwnProperty(key)) keys.push(key)\n    //     }\n    //     console.log('keys: ', keys)\n    //     let sig = 0\n\n    //     keys.forEach(e => {\n    //         console.log('current key = ', e)\n    //         if (one.includes(e)) {\n    //             sig = 1\n    //         } else if (three.includes(e)) {\n    //             sig = 3\n    //         } else if (enTwo.includes(e)) {\n    //             sig = -1\n    //         }\n    //         res.randVars[e] = this.roundRandVar(res.randVars[e], sig)\n    //     })\n    // };\n\n    // roundRandVar = (rv, sig) => {\n    //     console.log('rounding rv: ', rv)\n    //     const newRv = rv\n    //     if (sig === -1) {\n    //         console.log('k_s')\n    //         newRv.high = isNaN(rv.high) ? rv.high : rv.high.toExponential(2)\n    //         newRv.low = isNaN(rv.low) ? rv.low : rv.low.toExponential(2)\n    //         newRv.mean = isNaN(rv.mean) ? rv.mean : rv.mean.toExponential(2)\n    //         newRv.stdev = isNaN(rv.stdev)\n    //             ? rv.stdev\n    //             : rv.stdev.toExponential(2)\n    //         for (let i = 0; i < rv.vals.length; i++) {\n    //             newRv.vals[i] = rv.vals[i].toExponential(2)\n    //         }\n    //     } else {\n    //         const mult = Math.pow(10, sig)\n    //         console.log('mult = ', mult)\n    //         newRv.high = Math.round((rv.high + Number.EPSILON) * mult) / mult\n    //         newRv.low = Math.round((rv.low + Number.EPSILON) * mult) / mult\n    //         newRv.mean = Math.round((rv.mean + Number.EPSILON) * mult) / mult\n    //         newRv.stdev = Math.round((rv.stdev + Number.EPSILON) * mult) / mult\n    //         for (let i = 0; i < rv.vals.length; i++) {\n    //             newRv.vals[i] =\n    //                 Math.round((rv.vals[i] + Number.EPSILON) * mult) / mult\n    //         }\n    //     }\n\n    //     return newRv\n    // };\n\n    componentDidMount = () => {\n        setTimeout(() => {\n            this.getResults().then(res => {\n                const newData = res.results\n                setTimeout(() => {\n                    this.setState({ data: newData, done: true })\n                }, 1000)\n            })\n        }, 1200)\n    };\n\n    getResults = async () => {\n        this.setState({ loading: true })\n        try {\n            const res = await API.get('/api/display')\n            if (res.status === 200) {\n                console.log(res.status)\n            }\n            return res.data\n        } catch (err) {\n            console.log(err)\n        }\n    };\n\n    render() {\n        if (!this.state.done) {\n            return (\n                <Loading loading={this.state.loading} />\n            )\n        } else {\n            console.log(\"what's our data? here it is!\", this.state.data)\n            return (\n                <Fragment>\n                    <Header title=\"Display\" />\n                    <div className=\"paddedPage\">\n                        <Tabs defaultActiveKey=\"graphs\" id=\"display-tabs\">\n                            <Tab eventKey=\"randVars\" title=\"Random Variables\">\n                                <Tables.RVTable\n                                    data={this.state.data.randVars}\n                                    sat={this.state.data.sat}\n                                    conf={this.state.data.conf}\n                                />\n                            </Tab>\n                            <Tab eventKey=\"FS\" title=\"Factor of Safety by Z\">\n                                <Tables.FOSTable\n                                    data={this.state.data.z}\n                                    conf={this.state.data.conf}\n                                />\n                            </Tab>\n                            <Tab eventKey=\"graphs\" title=\"Visualizations\">\n                                <DisplayGraphs data={this.state.data} />\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </Fragment>\n            )\n        }\n    }\n}\n\nexport default DisplayPage\n","import React, { Component, Fragment } from 'react'\nimport AppMode from '../AppMode'\nimport WelcomePage from './Welcome.jsx'\nimport DataFormPage from './DataForm.jsx'\nimport DisplayPage from './Display.jsx'\n// import API from './apiClient'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link,\n//     Redirect\n// } from 'react-router-dom'\n\nconst modeTitle = {}\n\nmodeTitle[AppMode.WELCOME] = 'Welcome to LISA'\nmodeTitle[AppMode.DATAFORM] = 'LISA Inputs'\nmodeTitle[AppMode.DISPLAY] = 'Display Data'\n\nconst modeToPage = {}\nmodeToPage[AppMode.WELCOME] = WelcomePage\nmodeToPage[AppMode.DATAFORM] = DataFormPage\nmodeToPage[AppMode.DISPLAY] = DisplayPage\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // for real.\n            mode: AppMode.DATAFORM\n            // mode: AppMode.DISPLAY\n            // results: null\n            // datasets to use while testing\n            // testing: testing\n        }\n    }\n\n    handleChangeMode = newMode => {\n        this.setState({ mode: newMode })\n    };\n\n    render() {\n        const ModePage = modeToPage[this.state.mode]\n        return (\n            <Fragment>\n                <ModePage\n                    mode={this.state.mode}\n                    changeMode={this.handleChangeMode}\n                    // onSubmit={this.onSubmit}\n                />\n                {/* <DisplayPage\n                        // data={this.state.testing.results}\n                        data={this.state.results}\n                    /> */}\n                {/* <Switch>\n                    <Route path=\"/\">\n                        <DataFormPage\n                            mode={this.state.mode}\n                            changeMode={this.handleChangeMode}\n                            onSubmit={this.onSubmit}\n                        />\n                    </Route>\n                    <Route path=\"/results\">\n                        <DisplayPage data={this.state.results} />\n\n                    </Route>\n                </Switch> */}\n            </Fragment>\n        )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './styles/App.css'\nimport './styles/index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('app')\n)\nif (module.hot) {\n    module.hot.accept()\n}\n"],"sourceRoot":""}