{"version":3,"sources":["AppMode.js","components/Welcome.jsx","components/variables/RandVars.jsx","components/variables/OtherVars.jsx","components/Header.jsx","resources/test_data.jsx","components/apiClient.js","resources/labels.js","components/DataForm.jsx","resources/units.js","components/graphs/RVDist.jsx","components/graphs/FOSFreq.jsx","components/graphs/PFbyZ.jsx","components/graphs/SSbyZ.jsx","components/DisplayGraphs.jsx","components/tables/FOSTable.jsx","components/tables/RVTable.jsx","components/Display.jsx","components/App.jsx","index.js"],"names":["AppMode","WELCOME","DATAFORM","DISPLAY","Object","freeze","WelcomePage","className","React","Component","WelcomeBanner","AppDescription","ButtonContainer","Button","variant","RandVar","props","handleDistChange","selectedOption","selected","target","value","name","console","log","state","this","conf","dist","data","Form","Row","label","Group","as","Col","controlId","Label","Control","onChange","defaultValue","handleChange","handleNondetChange","style","width","type","min","placeholder","handleDetChange","NondetRandVarDisplayer","TruncNormalVar","e","bind","step","low","UniformVar","LognormalVar","TruncLognormalVar","ConstantVar","ConstVar","NumRandVars","val","Saturation","Analysis","Header","Navbar","bg","Brand","href","Toggle","Collapse","Text","numVars","sat","randVars","c","high","mean","stdev","c_r","phi","k_s","a","n","constVars","gamma","gamma_w","slope","flux","z","max","axios","create","baseURL","timeout","headers","LABELS","q","H_wt","z_step","DataFormPage","varName","key","newData","setState","detVal","handleConstVarChange","handleNumVarChange","number","handleZVarChange","handleSatChange","handleAnalysisChange","handleFluxChange","handleFluxAdd","append","handleFluxRemove","index","splice","onSubmit","preventDefault","API","post","then","res","changeMode","undefined","title","onClick","DataFormSelector","UNITS","RVDistGraph","setOptions","options","push","curData","rv","RVBar","getTickFormat","t","toExponential","toFixed","datapoints","domainPadding","overflow","theme","V","material","containerComponent","labels","datum","x","y","axisLabel","padding","tickFormat","tickCount","dependentAxis","nextProps","prevState","valsArr","vals","freqObj","forEach","rounded","Number","FOSFreq","componentDidMount","sorted","sort","FreqHistFOS","getCount","list","i","tickValues","length","fs_vals","PFbyZ","detGetDatapoints","dp","probFail","ticks","getTickVals","cur","sharedAxisStyles","tickLabels","fontSize","fontStyle","stroke","parent","border","orientation","invertAxis","SSbyZ","ss","Array","Math","ceil","keys","domain","DisplayGraphs","Tabs","defaultActiveKey","id","Tab","eventKey","FOSTable","getRows","sortedZ","Table","striped","hover","bordered","size","FSRowDisplay","RVTable","detRows","vars","getTable","table","RandVarRowDisplayDet","RandVarRowDisplayNondet","DisplayPage","get","results","roundResults","one","three","enTwo","hasOwnProperty","sig","includes","roundRandVar","newRv","isNaN","mult","pow","round","EPSILON","getResults","status","modeTitle","modeToPage","App","handleChangeMode","newMode","mode","ModePage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5484c530.chunk.js","sourcesContent":["const AppMode = {\n    WELCOME: 'WelcomeMode',\n    DATAFORM: 'DataFormMode',\n    DISPLAY: 'DisplayMode'\n}\n\nObject.freeze(AppMode)\nexport default AppMode\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\n\nclass WelcomePage extends React.Component {\n  render () {\n    return (\n      <div className=\"welcome-page\">\n        <div className=\"welcome-banner\">\n          <WelcomeBanner />\n        </div>\n\n        <div className=\"app-desc\">\n          <AppDescription />\n        </div>\n\n        <div className=\"button-container\">\n          <ButtonContainer />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WelcomeBanner extends React.Component {\n  render () {\n    return (\n      <div className=\"welcome-banner\">\n        <div className=\"welcome-text\">Welcome to LISA</div>\n      </div>\n    )\n  }\n}\n\nclass AppDescription extends React.Component {\n  render () {\n    return (\n      <div className=\"\">\n        <h2>Application Description</h2>\n        <br />\n        <p>Description of the LISA project. History and what it does.</p>\n      </div>\n    )\n  }\n}\n\nclass ButtonContainer extends React.Component {\n  render () {\n    return (\n      <div className=\"\">\n        <Button variant=\"success\">New Data</Button>\n        <Button variant=\"info\">Load Old Data by ID</Button>\n      </div>\n    )\n  }\n}\n\nexport default WelcomePage\n","import React, { Component, Fragment } from 'react'\nimport { Form, Col } from 'react-bootstrap'\nimport PropTypes from 'prop-types'\n\nclass RandVar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    componentDidMount() {\n        this.props.handleDistChange(this.props.name, 'truncnormal')\n    }\n\n    static propTypes = {\n        handleDistChange: PropTypes.func,\n        conf: PropTypes.string,\n        name: PropTypes.string,\n        label: PropTypes.string,\n        handleNondetChange: PropTypes.func,\n        handleDetChange: PropTypes.func,\n        data: PropTypes.object\n    };\n\n    handleDistChange = selectedOption => {\n        var selected = selectedOption.target.value\n        this.props.handleDistChange(this.props.name, selected)\n        console.log('selected: ', selected)\n    };\n\n    render() {\n        const conf = this.props.conf\n        var dist = this.props.data.dist\n        if (conf === 'nondet') {\n            return (\n                <Form.Row className=\"formRandVarContainerRow\">\n                    <div className=\"randVarContainer\">\n                        <Form.Row className=\"formLabel\">\n                            <h6>{this.props.label}</h6>\n                        </Form.Row>\n\n                        <Form.Row className=\"randVarInfo\">\n                            <Form.Group\n                                as={Col}\n                                className=\"col-sm-4\"\n                                controlId=\"formDist\"\n                            >\n                                <Form.Label> Distribution </Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    className=\"input\"\n                                    onChange={this.handleDistChange}\n                                >\n                                    <option value=\"truncnormal\" defaultValue>\n                                        Truncated Normal\n                                    </option>\n                                    <option value=\"lognormal\">Lognormal</option>\n                                    <option value=\"trunclognormal\">Truncated Lognormal</option>\n                                    <option value=\"uniform\">Uniform</option>\n                                    <option value=\"constant\">Constant</option>\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group as={Col} className=\"col-sm-8\">\n                                <div className=\"randVarInputs\">\n                                    <NondetRandVarDisplayer\n                                        dist={dist}\n                                        name={this.props.name}\n                                        data={this.props.data}\n                                        handleChange={\n                                            this.props.handleNondetChange\n                                        }\n                                    />\n                                </div>\n                            </Form.Group>\n                        </Form.Row>\n                    </div>\n                </Form.Row>\n            )\n        } else if (conf === 'det') {\n            return (\n                <Form.Row className=\"formRandVarContainerRow\">\n                    <div className=\"randVarContainer\">\n                        <Form.Row\n                            className=\"randVarInfo\"\n                            style={{ width: '50%' }}\n                        >\n                            <Form.Label> {this.props.label}</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                placeholder=\"Enter value\"\n                                onChange={this.handleDetChange}\n                            />\n                        </Form.Row>\n                    </div>\n                </Form.Row>\n            )\n        }\n    }\n}\n\n// class DetRandVarDisplayer extends Component {\n//     static propTypes = {\n//         handleChange: PropTypes.func,\n//         data: PropTypes.object,\n//         name: PropTypes.string\n//     }\n//     render () {\n//         return (\n//         )\n//     }\n// }\n\nclass NondetRandVarDisplayer extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        dist: PropTypes.string,\n        name: PropTypes.string\n    };\n\n    render() {\n        const dist = this.props.dist\n\n        switch (dist) {\n            case 'uniform':\n                return (\n                    <UniformVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'truncnormal':\n                return (\n                    <TruncNormalVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'lognormal':\n                return (\n                    <LognormalVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'trunclognormal':\n                return (\n                    <TruncLognormalVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            case 'constant':\n                return (\n                    <ConstantVar\n                        name={this.props.name}\n                        data={this.props.data}\n                        handleChange={this.props.handleChange}\n                    />\n                )\n            default:\n                return (\n                    <p>\n                        Error: invalid distribution selection\n                    </p>\n                )\n        }\n    }\n}\n\nclass TruncNormalVar extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in normal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Mean</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"mean\"\n                            onChange={this.handleChange.bind(this)}\n                            placeholder=\"Enter mean\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Std Dev</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            placeholder=\"Enter standard deviation\"\n                            name=\"stdev\"\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>Low</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"low\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter low\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>High</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={this.props.data.low}\n                            step={0.0000000001}\n                            name=\"high\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter high\"\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </Fragment>\n        )\n    }\n}\n\nclass UniformVar extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in uniform rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>Low</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        step={0.0000000001}\n                        name=\"low\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter low\"\n                    />\n                </Form.Group>\n\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>High</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={this.props.data.low}\n                        step={0.000000001}\n                        name=\"high\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter high\"\n                    />\n                </Form.Group>\n            </Fragment>\n        )\n    }\n}\n\nclass LognormalVar extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in lognormal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>Logmean</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        step={0.0000000001}\n                        name=\"logmean\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter logmean\"\n                    />\n                    <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                        <Form.Label>Logstdev</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"logstdev\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter logstdev\"\n                        />\n                    </Form.Group>\n                </Form.Group>\n            </Fragment>\n        )\n    }\n}\n\nclass TruncLognormalVar extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in trunc lognormal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Logmean</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"logmean\"\n                            onChange={this.handleChange.bind(this)}\n                            placeholder=\"Enter logmean\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formInput\">\n                        <Form.Label>Logstdev</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            placeholder=\"Enter logstdev\"\n                            name=\"logstdev\"\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>Low</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={0}\n                            step={0.0000000001}\n                            name=\"low\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter low\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group\n                        as={Col}\n                        className=\"input\"\n                        controlId=\"formInput\"\n                    >\n                        <Form.Label>High</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={this.props.data.low}\n                            step={0.0000000001}\n                            name=\"high\"\n                            onChange={this.handleChange}\n                            placeholder=\"Enter high\"\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </Fragment>\n        )\n    }\n}\n\nclass ConstantVar extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n        data: PropTypes.object,\n        name: PropTypes.string\n    };\n\n    handleChange = e => {\n        console.log('in lognormal rand var change')\n        this.props.handleChange(this.props.name, e.target.name, e.target.value)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form.Group as={Col} className=\"input\" controlId=\"formInput\">\n                    <Form.Label>Value</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        step={0.0000000001}\n                        name=\"const_val\"\n                        onChange={this.handleChange}\n                        placeholder=\"Enter constant value\"\n                    />\n                </Form.Group>\n            </Fragment>\n        )\n    }\n}\n\n\nexport default RandVar\n","import React, { Component } from 'react';\nimport { Form, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nclass ConstVar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n        };\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n        name: PropTypes.string,\n        label: PropTypes.string,\n    };\n\n    handleChange = e => {\n        this.props.handleChange(this.props.name, e.target.value);\n        console.log('in const var change');\n    };\n\n    render() {\n        // text for a placeholder for each value input field\n        return (\n            <div className=\"form-group\">\n                <Form.Row style={{ width: '300px' }}>\n                    <Form.Group as={Col} controlId=\"formVal\" style={{}}>\n                        <Form.Label>\n                            <h6>{this.props.label}</h6>\n                        </Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            min={-100}\n                            // ASK: currently using step value of 0.0001, should it be higher or lower?\n                            step={0.0000000001}\n                            placeholder=\"Enter value\"\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </div>\n        );\n    }\n}\n\nclass NumRandVars extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 'numVars',\n            label: 'Number of Random Variables',\n            value: 0,\n        };\n    }\n\n    static propTypes = {\n        handleChange: PropTypes.func,\n    };\n\n    handleChange = e => {\n        var val = e.target.value;\n        this.props.handleChange(val);\n        console.log('in numvar change');\n    };\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <Form.Group as={Col} controlId=\"form-numVars\">\n                    <Form.Label>Number of Random Variables</Form.Label>\n                    <Form.Control\n                        type=\"number\"\n                        min={0}\n                        placeholder=\"Enter value\"\n                        onChange={this.handleChange}\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n}\n\nclass Saturation extends React.Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n    };\n\n    handleChange = selectedOption => {\n        var selected = selectedOption.target.value;\n        console.log('selected option: ', selected);\n        if (selected === 'true') {\n            this.props.handleChange(true);\n        } else if (selected === 'false') {\n            this.props.handleChange(false);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <Form.Group as={Col} controlId=\"formDropDown\">\n                    <Form.Label>Soil Saturation</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        className=\"input\"\n                        onChange={this.handleChange}\n                    >\n                        <option value=\"true\" defaultValue>\n                            Saturated\n                        </option>\n                        <option value=\"false\">Unsaturated</option>\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n    }\n}\n\nclass Analysis extends Component {\n    static propTypes = {\n        handleChange: PropTypes.func,\n    };\n\n    handleChange = selectedOption => {\n        var selected = selectedOption.target.value;\n        console.log('selected option: ', selected);\n        this.props.handleChange(selected);\n    };\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <Form.Group as={Col} controlId=\"formDropDown\">\n                    <Form.Label>Analysis Type</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        className=\"input\"\n                        onChange={this.handleChange}\n                    >\n                        <option value=\"nondet\">Non-determinisitic</option>\n                        <option value=\"det\" defaultValue>\n                            Deterministic\n                        </option>\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n    }\n}\n\nexport { ConstVar, NumRandVars, Saturation, Analysis };\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Navbar } from 'react-bootstrap'\n\nclass Header extends Component {\n    static propTypes = {\n        title: PropTypes.string\n    }\n\n    render() {\n        return (\n            <>\n                <Navbar className=\"navbar\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand className=\"navbar-brand\" href=\"#\">LISA</Navbar.Brand>\n                    <Navbar.Toggle />\n                    <Navbar.Collapse >\n                        <Navbar.Text>\n                            WSU Suction-Based LISA\n                        </Navbar.Text>\n                    </Navbar.Collapse>\n                </Navbar>\n            </>\n        )\n    }\n}\n\nexport default Header\n","var data = {\n    numVars: 1000,\n    conf: 'nondet',\n    sat: false,\n    randVars: {\n        c: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        c_r: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        phi: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        k_s: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        a: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        n: {\n            dist: 'truncnormal',\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        }\n    },\n    constVars: {\n        gamma: 0,\n        gamma_w: 0,\n        slope: 0,\n        flux: 0\n    },\n    z: {\n        max: 1,\n        step: 0.1\n    }\n}\n// use this normally\nvar results = {\n    randVars: {\n        c: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        c_r: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        phi: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        k_s: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        a: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        },\n        n: {\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        }\n    },\n    z: {}\n}\n// datasets to use while testing\nvar testing = {\n    data: {\n        numVars: 1000,\n        sat: false,\n        conf: 'nondet',\n        randVars: {\n            c: {\n                dist: 'truncnormal',\n                low: 0,\n                high: 4,\n                mean: 1.058,\n                stdev: 0.647\n            },\n            c_r: {\n                dist: 'constant',\n                low: 4,\n                high: 6,\n                mean: 6,\n                stdev: 1.2,\n                const_val: 0\n            },\n            phi: {\n                dist: 'truncnormal',\n                low: 30,\n                high: 48.9,\n                mean: 36.055,\n                stdev: 3.058\n\n            },\n            k_s: {\n                dist: 'constant',\n                low: 0.0,\n                high: 0.0,\n                mean: 0.0,\n                stdev: 0.0,\n                const_val: 1e-6\n            },\n            a: {\n                dist: 'truncnormal',\n                low: 0.002,\n                high: 0.45,\n                mean: 0.112,\n                stdev: 0.073\n            },\n            n: {\n                dist: 'lognormal',\n                low: 1.672,\n                high: 7.78,\n                logmean: 2.670,\n                logstdev: 0.270\n            }\n        },\n        constVars: {\n            gamma: 18,\n            gamma_w: 9.81,\n            slope: 45,\n            q: 0,\n            H_wt: 5,\n            z_step: 0.5\n        }\n\n    },\n    results: {\n        conf: 'det',\n        sat: false,\n        randVars: {\n            c: 3,\n            c_r: 3,\n            phi: 32,\n            k_s: 4.18e-7,\n            a: 0.46,\n            n: 0.34\n        },\n        z: {\n            0.0: 0.095457587203445,\n            0.1: 1.1616299823622254,\n            0.2: 1.235914054813119,\n            0.3: 1.3142193846129107,\n            0.4: 1.3981467313517522,\n            0.5: 1.4914392120115902,\n            0.6: 0.5995303531557186,\n            0.7: 1.7300615312846213,\n            0.8: 1.8943911254712353,\n            0.9: 2.1108213345466944,\n            1.0: 2.4117398513524413,\n            1.1: 2.8614389299155913,\n            1.2: 3.6095011422279972,\n            1.3: 5.104246958737955,\n            1.4: 9.586723135594072\n        }\n    },\n    results_old: {\n        conf: 'nondet',\n        sat: false,\n        randVars: {\n            a: {\n                dist: 'Truncated Normal',\n                high: 12.0,\n                low: 0.0,\n                mean: 0.38,\n                stdev: 0.02,\n                vals: [\n                    0.40438210472686664,\n                    0.3462112318756129,\n                    0.34889881520461447,\n                    0.4245730308442856,\n                    0.40983583023517783,\n                    0.3899969060549416,\n                    0.4050043727724889,\n                    0.3927426751301315,\n                    0.3725504527405223,\n                    0.405864049450923,\n                    0.39719417867978096,\n                    0.3798864320749289,\n                    0.4146418367900538,\n                    0.37623115736021606,\n                    0.41678144414866847,\n                    0.3959231035653321,\n                    0.4217303586869785,\n                    0.35917752651503004,\n                    0.3631756845682461,\n                    0.37274882275410426,\n                    0.36167262463274863,\n                    0.3610341177743017,\n                    0.3746169458690525,\n                    0.408740953398221,\n                    0.365844270020115,\n                    0.33994518574161714,\n                    0.3515144344666133,\n                    0.38746509604290835,\n                    0.3840621429594436,\n                    0.37196833187657063,\n                    0.37591668899311154,\n                    0.39658605026770044,\n                    0.3836942458352934,\n                    0.35462097123898517,\n                    0.3573419025262797,\n                    0.3878682040240105,\n                    0.3679970856971985,\n                    0.37023034617814643,\n                    0.40836065634692853,\n                    0.3543112430414042,\n                    0.38389791582018873,\n                    0.3697231119304556,\n                    0.3567521991188725,\n                    0.39552955285515207,\n                    0.35603600223527204,\n                    0.3533731071667795,\n                    0.355938049036266,\n                    0.4061249356476429,\n                    0.42753915719304625,\n                    0.3851284389003133,\n                    0.3870526784590621,\n                    0.36975157683000315,\n                    0.3911775191227789,\n                    0.3892160923490381,\n                    0.39679955586280935,\n                    0.3868135169722991,\n                    0.38513412536462344,\n                    0.34579186847602217,\n                    0.3734018671743142,\n                    0.3723693929093961,\n                    0.42074843189123967,\n                    0.39897797701894405,\n                    0.3806096941063881,\n                    0.39093354348343146,\n                    0.3905423841655827,\n                    0.38336848417045954,\n                    0.3978384477815205,\n                    0.38592932642011435,\n                    0.40417829586238924,\n                    0.41535404888520433,\n                    0.3570475713151158,\n                    0.38979198434510565,\n                    0.3722613950669484,\n                    0.3798539722020242,\n                    0.36960547510886216,\n                    0.3430756578675379,\n                    0.3746039379146087,\n                    0.38603976414607194,\n                    0.3829136145093133,\n                    0.35592279751976347,\n                    0.3567015224024419,\n                    0.3942066467841221,\n                    0.42036317057608,\n                    0.3812619892154944,\n                    0.39263228008538315,\n                    0.37871181364084233,\n                    0.3588123750416386,\n                    0.39227412414010293,\n                    0.3810086803831151,\n                    0.37463266999676303,\n                    0.3788169561162493,\n                    0.34669977754752024,\n                    0.4161301176052021,\n                    0.38619298450666284,\n                    0.3472763062487962,\n                    0.36551468788224634,\n                    0.3691803588059573,\n                    0.37347662387039343,\n                    0.373106293384728,\n                    0.41502052818362206\n                ]\n            },\n            c: {\n                dist: 'Truncated Normal',\n                high: 4.0,\n                low: 1.0,\n                mean: 2.0,\n                stdev: 0.37,\n                vals: [\n                    2.2284950351242916,\n                    1.7087877729584544,\n                    1.5162858363737675,\n                    1.6618562489329527,\n                    1.9199056081089259,\n                    2.9475615396622996,\n                    1.9036836045668086,\n                    2.207055814610962,\n                    1.790404783308323,\n                    2.4945522259519293,\n                    1.564017164379414,\n                    2.3590088795560864,\n                    1.3245615765648164,\n                    2.60469043094961,\n                    1.879650901988616,\n                    2.3188609685691355,\n                    1.5336597857924033,\n                    2.3246647612208267,\n                    1.3489643684658734,\n                    1.5057666321218242,\n                    2.0190337986119666,\n                    2.412667003849135,\n                    2.2934564485663005,\n                    2.286887823884271,\n                    2.2288713352297633,\n                    2.05283722264849,\n                    2.1601844096210376,\n                    1.2369102536305803,\n                    1.6558245824983353,\n                    2.3444691649961844,\n                    1.94233829246948,\n                    2.0143568751805585,\n                    2.3228951512246088,\n                    1.7413546920730534,\n                    1.7378640221570356,\n                    2.109196531381899,\n                    1.938744263031515,\n                    1.7551783964860133,\n                    2.2153457915777808,\n                    1.9326700284437628,\n                    2.2248333383701357,\n                    1.1322656434417122,\n                    2.3108574832699547,\n                    1.9395263949927601,\n                    2.7455259404802193,\n                    1.782630418280125,\n                    2.1221020317835886,\n                    1.6031567657384436,\n                    2.0005108575630106,\n                    1.8213202483178246,\n                    1.5977784559919885,\n                    1.5038913226884083,\n                    1.8101140071227253,\n                    2.067364304650241,\n                    2.0485217313102715,\n                    1.8276138739944117,\n                    1.8042182350460285,\n                    2.489702012942012,\n                    1.5896396864428302,\n                    1.727969904444738,\n                    1.967055876443827,\n                    1.9453680207458868,\n                    1.7719362202251578,\n                    2.0630207382987926,\n                    2.5600557544091482,\n                    2.310567342644336,\n                    2.149191241944239,\n                    1.485453725509999,\n                    1.709979610712883,\n                    2.176810167121663,\n                    2.833745339403554,\n                    1.6727454547770988,\n                    2.0572313968778655,\n                    2.0310665534973174,\n                    2.41684173938325,\n                    1.8558668125974456,\n                    1.8019994117130709,\n                    1.9404157605596197,\n                    2.117740582599131,\n                    1.848886731209179,\n                    1.9150515794434058,\n                    1.4546906708429121,\n                    2.3773548474909205,\n                    2.11216880202506,\n                    2.4749271563794615,\n                    2.026223857506728,\n                    1.8429849536585308,\n                    1.932651875660033,\n                    1.4041803109996913,\n                    2.125912334221517,\n                    2.012569388111916,\n                    2.0886982021833025,\n                    2.3433229702906213,\n                    1.6389740573507974,\n                    1.986563322787758,\n                    1.8715207622219456,\n                    1.7272875955262716,\n                    1.8421089400721902,\n                    2.104220939197705,\n                    2.167953002610676\n                ]\n            },\n            c_r: {\n                dist: 'Uniform',\n                high: 6.0,\n                low: 4.0,\n                mean: 6.783436053224627,\n                stdev: 1.7366667746458717,\n                vals: [\n                    6.9443128976614705,\n                    9.08788475282187,\n                    9.659767435774029,\n                    7.661952895143921,\n                    6.537843044860991,\n                    8.970793705249541,\n                    4.610416082195634,\n                    8.966029433187316,\n                    7.113872583591063,\n                    4.6167045396513045,\n                    7.211678371609395,\n                    7.283094460115554,\n                    5.847084883435192,\n                    8.53495708478402,\n                    6.105054901171281,\n                    5.278834619511058,\n                    6.112943717522323,\n                    5.639095574395017,\n                    8.97538120936218,\n                    6.9201130657587,\n                    4.839210416491672,\n                    5.184119400813295,\n                    5.1377718425098555,\n                    5.09512081029423,\n                    5.1108706382561095,\n                    7.232306530175668,\n                    4.906595128135239,\n                    4.07231840304977,\n                    5.637652729282282,\n                    7.604988185088695,\n                    6.943258926503008,\n                    5.215787829541521,\n                    4.982528317214067,\n                    4.581905288787754,\n                    6.9154294592887435,\n                    7.083295929199181,\n                    9.286120903318103,\n                    9.872628029284236,\n                    5.5119066745928205,\n                    5.602240768517933,\n                    4.661077959612372,\n                    9.36924105048466,\n                    4.890349162551952,\n                    7.487760169330795,\n                    6.96391434082514,\n                    5.656162764129272,\n                    4.126795794104166,\n                    5.6223982071651175,\n                    4.006592351271787,\n                    6.85577835308907,\n                    4.920766689091992,\n                    4.9869822127161045,\n                    5.082559512705551,\n                    9.655363643219754,\n                    9.843584771415884,\n                    9.112942927918235,\n                    5.979328404362143,\n                    4.962923727486805,\n                    6.604937476787622,\n                    5.041122020072052,\n                    5.362920748292771,\n                    8.213557108622943,\n                    5.967739803993604,\n                    9.946110599368087,\n                    4.356575051975613,\n                    6.427371871918638,\n                    9.637526730546128,\n                    7.530022486895242,\n                    6.894420351740701,\n                    8.750535229876974,\n                    6.023154985840116,\n                    5.392302720570386,\n                    6.487027139919084,\n                    8.163977849463242,\n                    8.447473224583836,\n                    4.354431334135915,\n                    4.6340242435103125,\n                    8.32076508638249,\n                    5.303150352635033,\n                    8.351768560892197,\n                    9.339299188211031,\n                    8.913641488586332,\n                    7.545568430649029,\n                    7.158303634287111,\n                    5.673120355460513,\n                    9.651029140851652,\n                    4.220809474810702,\n                    6.012300329705402,\n                    6.527143179314473,\n                    5.825623296918297,\n                    9.762757700562748,\n                    6.411819438208748,\n                    5.295636856996895,\n                    8.900420996023986,\n                    7.996663852030594,\n                    9.073865467126858,\n                    6.508034221705713,\n                    8.585935086011371,\n                    8.557542807870888,\n                    9.094781889480817\n                ]\n            },\n            k_s: {\n                dist: 'Truncated Normal',\n                high: 10.0,\n                low: 0.0,\n                mean: 4.18e-7,\n                stdev: 0.0,\n                vals: [\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7,\n                    4.18e-7\n                ]\n            },\n            n: {\n                dist: 'Uniform',\n                high: 0.44,\n                low: 0.2,\n                mean: 0.44951286617620617,\n                stdev: 0.12669319273490146,\n                vals: [\n                    0.6281378467907303,\n                    0.45647775217232583,\n                    0.4194892703078501,\n                    0.28485011080564815,\n                    0.27408545168043424,\n                    0.38730265800682373,\n                    0.49129354563505406,\n                    0.47553722882440497,\n                    0.22625260696987148,\n                    0.2436061142172408,\n                    0.5119290186069869,\n                    0.44238656023426803,\n                    0.27327475444191435,\n                    0.5040569458824129,\n                    0.5641420986738028,\n                    0.6134421537514877,\n                    0.49502203449429666,\n                    0.38700187393332974,\n                    0.432061408818993,\n                    0.4598517316649859,\n                    0.3744888942662806,\n                    0.41058046125861336,\n                    0.480073823428812,\n                    0.6128929300212905,\n                    0.5191839811922155,\n                    0.2109658787469929,\n                    0.46380270147016833,\n                    0.5937040273784232,\n                    0.476629382030036,\n                    0.288291063063038,\n                    0.5759457629236935,\n                    0.307021784387156,\n                    0.40458121437387506,\n                    0.2114873706255877,\n                    0.40328591464189334,\n                    0.3849750767555362,\n                    0.4911183827034261,\n                    0.4393154362298889,\n                    0.33598197380658446,\n                    0.5548333839896791,\n                    0.6163420999534405,\n                    0.5404757309611515,\n                    0.5256921621612134,\n                    0.6239237467292826,\n                    0.4536275157438751,\n                    0.28292793278219086,\n                    0.5016284325881504,\n                    0.5700919940511239,\n                    0.450591515119793,\n                    0.3889725005503195,\n                    0.43072356689545754,\n                    0.6111006161299871,\n                    0.614198062817521,\n                    0.631429927000856,\n                    0.20905406127414777,\n                    0.39580860979873056,\n                    0.4199694352296922,\n                    0.6129208955257268,\n                    0.5406684759497833,\n                    0.6043842794248799,\n                    0.627389819625132,\n                    0.5998843451894684,\n                    0.48458793819903423,\n                    0.45289980602137464,\n                    0.6345690902620815,\n                    0.5018506733340664,\n                    0.3800096338414073,\n                    0.3261332687250067,\n                    0.5908171522173462,\n                    0.26432682481626685,\n                    0.5683073665039693,\n                    0.6011401086593013,\n                    0.2972484291909675,\n                    0.2648298992108536,\n                    0.5734003696695987,\n                    0.32037002874276593,\n                    0.5303101045578293,\n                    0.5249850869944144,\n                    0.3618537180025144,\n                    0.3729663737524338,\n                    0.3939567114729561,\n                    0.6264902684163469,\n                    0.3083960553754882,\n                    0.6134057594306241,\n                    0.32388105269001755,\n                    0.3228846706028856,\n                    0.22727843851011403,\n                    0.6076178478851935,\n                    0.4896290724953088,\n                    0.38368936441882007,\n                    0.5958727635957193,\n                    0.29625267114333154,\n                    0.6214330358544693,\n                    0.408399263726854,\n                    0.5411595095954695,\n                    0.5679573928330366,\n                    0.2975835032453533,\n                    0.41091144057164175,\n                    0.28132240010732523,\n                    0.22139318824045295\n                ]\n            },\n            phi: {\n                dist: 'Truncated Normal',\n                high: 50.0,\n                low: 0.0,\n                mean: 36.0,\n                stdev: 1.67,\n                vals: [\n                    38.594126626560666,\n                    35.042398739261344,\n                    39.38348475587637,\n                    35.94014934337683,\n                    34.179792112191556,\n                    37.8044143635858,\n                    35.30743563433588,\n                    37.5374935199109,\n                    36.02342327521963,\n                    34.65087529939959,\n                    37.4813631740166,\n                    35.21123692539808,\n                    35.21301793690595,\n                    36.251463804293955,\n                    38.8793837756269,\n                    35.06988536552091,\n                    39.365566040503545,\n                    33.67893957190841,\n                    33.045949626217414,\n                    37.32505061785931,\n                    37.695572986233934,\n                    37.81572572539288,\n                    34.703018373873796,\n                    35.56124191912757,\n                    33.435229213829835,\n                    36.83671322040469,\n                    39.13885206401176,\n                    35.43205663043756,\n                    35.03651741871712,\n                    38.080035785867544,\n                    33.99299695236664,\n                    37.1390898723211,\n                    37.464984173878854,\n                    35.21499473488897,\n                    35.60560662212485,\n                    36.4974239205522,\n                    35.35468470555597,\n                    36.72718382596652,\n                    34.48456763722934,\n                    31.92114852044375,\n                    33.971004780272175,\n                    31.096230920942567,\n                    37.22522602622413,\n                    35.4597310742004,\n                    37.62056350605974,\n                    34.711591253812884,\n                    34.89978630810346,\n                    37.14569595673448,\n                    37.991582146642706,\n                    37.02942584672487,\n                    36.84596238504168,\n                    38.1538626744162,\n                    38.4478848846379,\n                    34.61576552078801,\n                    35.7031999803253,\n                    36.32438767909349,\n                    35.42030374453807,\n                    34.47093919170995,\n                    35.603915981683826,\n                    36.73303117474996,\n                    34.86360507243047,\n                    36.07218253156762,\n                    33.73283836114724,\n                    35.69063202118442,\n                    36.16663557440284,\n                    36.38535648451775,\n                    37.31759608633897,\n                    35.08821250437552,\n                    35.81791495565074,\n                    34.8327051561029,\n                    34.524649460924294,\n                    33.40089962227939,\n                    35.44767356677488,\n                    35.21282807115188,\n                    34.73537637510752,\n                    37.50633383485596,\n                    37.64130172926872,\n                    37.64490552245307,\n                    34.09018714752669,\n                    36.840994689707024,\n                    36.69760729883144,\n                    35.866891231235066,\n                    38.56716568497244,\n                    34.462170141176706,\n                    33.22386241613579,\n                    32.23431491279552,\n                    33.61998694770523,\n                    38.86402782242663,\n                    36.531052083433394,\n                    33.14238361683448,\n                    33.727924650010046,\n                    37.987917477120625,\n                    33.8187593665822,\n                    34.53490315417438,\n                    38.56513961840815,\n                    34.938658636999,\n                    38.204446406421994,\n                    35.66515110882065,\n                    33.06912486828294,\n                    36.82538179293971\n                ]\n            }\n        },\n        z: {\n            '0.0': {\n                fs_vals: [\n                    0.4471099203101982,\n                    0.4904102077936776,\n                    0.49773878856947307,\n                    0.4308104075690128,\n                    0.40696683376779774,\n                    0.582977128806829,\n                    0.33010914867957847,\n                    0.5247114142121271,\n                    0.41939930000814546,\n                    0.37669839182569265,\n                    0.4054789294262048,\n                    0.4706318517344206,\n                    0.3331846288848951,\n                    0.5389936449679702,\n                    0.3868375178489613,\n                    0.3888845708489933,\n                    0.36001032506302466,\n                    0.40346765085634,\n                    0.4577768606389775,\n                    0.38947632666675874,\n                    0.3481285495574747,\n                    0.39252758464751236,\n                    0.3813601858683316,\n                    0.3791724101201087,\n                    0.37523973759669166,\n                    0.444626704920496,\n                    0.36184172342656135,\n                    0.2567113298161149,\n                    0.35095301546191976,\n                    0.48211476529729663,\n                    0.4246249220173321,\n                    0.36252947372167216,\n                    0.3775811223397366,\n                    0.31625939893858274,\n                    0.4074963726903064,\n                    0.4432034898809012,\n                    0.5162199776227895,\n                    0.5248229342061279,\n                    0.3899058140293484,\n                    0.3712776794276651,\n                    0.35728410338637817,\n                    0.45622636617129747,\n                    0.37302212270948476,\n                    0.44575737095358103,\n                    0.48843004791315997,\n                    0.3616244549290009,\n                    0.3282745042224056,\n                    0.34622398975066687,\n                    0.3140240810352082,\n                    0.4117026999892046,\n                    0.31828720004219485,\n                    0.31352019051344787,\n                    0.3412857853706275,\n                    0.5407879314713818,\n                    0.5466913032955462,\n                    0.500712575525767,\n                    0.3759907793903608,\n                    0.3898952060145423,\n                    0.3836947784185601,\n                    0.33321811093966774,\n                    0.36458950985021277,\n                    0.47467816274959673,\n                    0.37300440174289884,\n                    0.5518491010182617,\n                    0.3716347670899572,\n                    0.4332747669493062,\n                    0.5465062437033179,\n                    0.4118011740358918,\n                    0.40448547345750846,\n                    0.5138884534949137,\n                    0.4584566927312637,\n                    0.34265857373037584,\n                    0.41574470328136526,\n                    0.47945533162579906,\n                    0.5208296746411897,\n                    0.316320194483561,\n                    0.3230597281151551,\n                    0.4784939846079109,\n                    0.37406398109150174,\n                    0.4725310597376688,\n                    0.5164471508665821,\n                    0.4636479541283199,\n                    0.48236384806395566,\n                    0.4463780877779307,\n                    0.4165872418909583,\n                    0.5373912492496121,\n                    0.31006977969128485,\n                    0.3873570227853125,\n                    0.36609818828681784,\n                    0.3951940378573071,\n                    0.5407018226190816,\n                    0.41526336637550404,\n                    0.39146207049326026,\n                    0.4775831023813953,\n                    0.46940354892572983,\n                    0.5026238035910098,\n                    0.39069056520620615,\n                    0.4811824692610099,\n                    0.5006268504418157,\n                    0.5266936429294968\n                ],\n                high: 0.58,\n                low: 0.26,\n                mean: 0.42,\n                probFail: 0.0,\n                stdev: 0.07\n            },\n            0.05: {\n                fs_vals: [\n                    0.49814208300318796,\n                    0.5378108640768489,\n                    0.5506430893210433,\n                    0.4782497294668542,\n                    0.45136442786131314,\n                    0.6375034825070937,\n                    0.3731031661486394,\n                    0.5769366392272862,\n                    0.46588605307582237,\n                    0.4205470269308342,\n                    0.4535838292071724,\n                    0.5180415173068305,\n                    0.37628581980242976,\n                    0.5899262574122872,\n                    0.43631965276241685,\n                    0.4335187692087502,\n                    0.40926286330054734,\n                    0.4465441693094713,\n                    0.5020881098115882,\n                    0.43648975359419917,\n                    0.393993418169701,\n                    0.44005996001622455,\n                    0.425037273979598,\n                    0.4242005005042592,\n                    0.41716742206928753,\n                    0.4924156371930205,\n                    0.4097978738233662,\n                    0.2971012782900007,\n                    0.39408979043179454,\n                    0.533237599328788,\n                    0.46900968114195923,\n                    0.4087250808561825,\n                    0.42451668129993353,\n                    0.35798444532315316,\n                    0.4528582000784417,\n                    0.4912879030517076,\n                    0.5652010349287652,\n                    0.5757447973604434,\n                    0.4340472317581709,\n                    0.41127768973231327,\n                    0.3994249801687824,\n                    0.49848700365436566,\n                    0.4190943830350141,\n                    0.4928017207643955,\n                    0.5389480839416345,\n                    0.40432349039418797,\n                    0.3700754960574414,\n                    0.39198896121944526,\n                    0.35999289288981406,\n                    0.45930413232678763,\n                    0.36247213997466105,\n                    0.3588860969859128,\n                    0.3883001944903992,\n                    0.5900540100293885,\n                    0.5975178530849394,\n                    0.5505590857109399,\n                    0.4204494798623259,\n                    0.4331807518324057,\n                    0.4284720869262278,\n                    0.377571883111948,\n                    0.40843319733501476,\n                    0.523485657651366,\n                    0.4153791450580366,\n                    0.6027638472506935,\n                    0.41689248911191706,\n                    0.4808213177180897,\n                    0.5992811760249848,\n                    0.45712017879495054,\n                    0.45063510388997385,\n                    0.5627853908268785,\n                    0.5043399612399507,\n                    0.3837306807145129,\n                    0.4614296656510934,\n                    0.5271706551296926,\n                    0.5692835947159974,\n                    0.36053937445768863,\n                    0.3681972991716419,\n                    0.5291641135409592,\n                    0.41690501966313587,\n                    0.521561129849922,\n                    0.5668338069280323,\n                    0.5117710781403583,\n                    0.5347834941666781,\n                    0.4921119404097858,\n                    0.46004582019224066,\n                    0.5837685517501718,\n                    0.3498554908713907,\n                    0.43650470423021626,\n                    0.41146922632273975,\n                    0.4376043106879267,\n                    0.5888308459040997,\n                    0.4635437435360079,\n                    0.4349830894091326,\n                    0.5245391965301993,\n                    0.5202723115609017,\n                    0.5506231127255359,\n                    0.4387712626552343,\n                    0.5293937669601404,\n                    0.5465727775949967,\n                    0.5783991928156248\n                ],\n                high: 0.64,\n                low: 0.3,\n                mean: 0.47,\n                probFail: 0.0,\n                stdev: 0.07\n            },\n            0.1: {\n                fs_vals: [\n                    0.5521020858585836,\n                    0.5880542120762793,\n                    0.6066858131774222,\n                    0.5283951426768507,\n                    0.49831511538046824,\n                    0.6952510111474078,\n                    0.4185307240010911,\n                    0.6322206410581989,\n                    0.5150890271203151,\n                    0.4669043523365552,\n                    0.5044473059444405,\n                    0.5682400834259786,\n                    0.42181605613904083,\n                    0.6438818077354537,\n                    0.4885904341517987,\n                    0.48072276902598693,\n                    0.4612660559600544,\n                    0.49216294475797634,\n                    0.5490369297662805,\n                    0.4862273473470922,\n                    0.44251022183482985,\n                    0.490361733113486,\n                    0.4712556294561837,\n                    0.4717957648384696,\n                    0.46155076557320424,\n                    0.5430481332626396,\n                    0.46053997576335726,\n                    0.3397623177599015,\n                    0.4397078713543896,\n                    0.587361936778447,\n                    0.5159995688448933,\n                    0.45755220794406143,\n                    0.4741497068833102,\n                    0.4021305005168929,\n                    0.5008884801087063,\n                    0.5421678843703214,\n                    0.6170981011095381,\n                    0.6296876363912893,\n                    0.48071848577736404,\n                    0.45364157080720047,\n                    0.4439996934456812,\n                    0.5432687054447884,\n                    0.46785195093956133,\n                    0.5425796311389662,\n                    0.5924614504263095,\n                    0.4495253341673815,\n                    0.4143074504050856,\n                    0.44033921533646775,\n                    0.4085050811966552,\n                    0.5096585417801259,\n                    0.4091672488848476,\n                    0.4068443002910867,\n                    0.43798145949753614,\n                    0.642240946457588,\n                    0.6513405290664918,\n                    0.6033327070984696,\n                    0.4674736953153832,\n                    0.4790271167236192,\n                    0.47585146082232727,\n                    0.42447393227546026,\n                    0.45475837342730435,\n                    0.5751330322230146,\n                    0.4602142688707422,\n                    0.6566902681617443,\n                    0.46474739500966317,\n                    0.5311346947635674,\n                    0.6551512180804806,\n                    0.5050724147586134,\n                    0.49943281952220364,\n                    0.614533420257142,\n                    0.5529518476418953,\n                    0.4271642945743572,\n                    0.5097866922476,\n                    0.57769672558452,\n                    0.6206267247077404,\n                    0.40732793809224044,\n                    0.4159146981506539,\n                    0.5827903362793384,\n                    0.4622287369128564,\n                    0.5734975046395135,\n                    0.6202255195322015,\n                    0.562697376352968,\n                    0.590203873108295,\n                    0.5405294083609631,\n                    0.5060362497423054,\n                    0.6329262197024733,\n                    0.3919501145935065,\n                    0.4884593680355142,\n                    0.4594520694458023,\n                    0.4824983942561771,\n                    0.6398339307093134,\n                    0.5146671596620442,\n                    0.48099403334553814,\n                    0.5742573843507148,\n                    0.5741553296183588,\n                    0.6014809435769185,\n                    0.48963795516792297,\n                    0.5804509527577102,\n                    0.5952587109912034,\n                    0.6331081860510983\n                ],\n                high: 0.7,\n                low: 0.34,\n                mean: 0.52,\n                probFail: 0.0,\n                stdev: 0.08\n            },\n            0.15: {\n                fs_vals: [\n                    0.608638830241032,\n                    0.6409311676043331,\n                    0.6655972610991328,\n                    0.5809098076284679,\n                    0.5475211081866321,\n                    0.7559383628824805,\n                    0.46606127182603596,\n                    0.6902666641196743,\n                    0.5667322030456018,\n                    0.5154616954350915,\n                    0.5577349359523665,\n                    0.6209678532821234,\n                    0.46943554138473187,\n                    0.7006089053583372,\n                    0.5432604478910493,\n                    0.5301967804234008,\n                    0.5156076900547362,\n                    0.5400923535705465,\n                    0.5984099661458329,\n                    0.538385647249843,\n                    0.49337408627316465,\n                    0.5431393429532327,\n                    0.5197448889516119,\n                    0.5216325551510744,\n                    0.5081455830791158,\n                    0.5962878830682891,\n                    0.5137607470978984,\n                    0.38436350431755606,\n                    0.4875121391979199,\n                    0.6441994443593683,\n                    0.5653443357221362,\n                    0.5086709600629018,\n                    0.5261564915170935,\n                    0.44842770548127825,\n                    0.5513335810077892,\n                    0.5955469981016762,\n                    0.6716769648624773,\n                    0.6863972050315077,\n                    0.5296141423231737,\n                    0.49815671345107365,\n                    0.49073032988460036,\n                    0.5903752406778638,\n                    0.5190103148212871,\n                    0.5948014573833519,\n                    0.6487126606134616,\n                    0.49698073107516566,\n                    0.4607062625907405,\n                    0.4909178534853962,\n                    0.4591528189989183,\n                    0.5624563366350515,\n                    0.45803763909675627,\n                    0.45706233604833957,\n                    0.4899701314801114,\n                    0.6971054012223775,\n                    0.7078920136521859,\n                    0.6587567368412351,\n                    0.5167682146889581,\n                    0.5272054731709891,\n                    0.5255520023805392,\n                    0.4736146273825568,\n                    0.5032322520007801,\n                    0.629324823570838,\n                    0.5072434049949273,\n                    0.7133699820289878,\n                    0.5148850615090426,\n                    0.5839232874259581,\n                    0.7138223221328925,\n                    0.5553763533949155,\n                    0.5505614444418666,\n                    0.668847407821481,\n                    0.6040673973078541,\n                    0.4726786836544261,\n                    0.5605473287882786,\n                    0.630776278659178,\n                    0.6746326434886919,\n                    0.45640120689180463,\n                    0.4658830155884428,\n                    0.6390705904283552,\n                    0.5097612989925966,\n                    0.6280893949710419,\n                    0.6763844370005617,\n                    0.616137539877761,\n                    0.6482624269780605,\n                    0.5913731677109304,\n                    0.5542972949832423,\n                    0.6846655089999114,\n                    0.43609767088540663,\n                    0.5428658381466419,\n                    0.509737625634693,\n                    0.5296311018857812,\n                    0.6934927948959098,\n                    0.5683642787664397,\n                    0.5291912655477077,\n                    0.6264818603594962,\n                    0.6307892187229932,\n                    0.6549682396309031,\n                    0.5429793453070276,\n                    0.634098840695064,\n                    0.6464710808400495,\n                    0.690507033244684\n                ],\n                high: 0.76,\n                low: 0.38,\n                mean: 0.57,\n                probFail: 0.0,\n                stdev: 0.08\n            },\n            0.2: {\n                fs_vals: [\n                    0.6674673127590138,\n                    0.6962712807424126,\n                    0.7271508188543722,\n                    0.635528205589655,\n                    0.5987444833943906,\n                    0.8193474559976808,\n                    0.5154204000451371,\n                    0.7508397259435788,\n                    0.6205859424117581,\n                    0.5659678676730063,\n                    0.613171154175463,\n                    0.6760158277875562,\n                    0.5188652683780424,\n                    0.7599093686082834,\n                    0.6000112038202317,\n                    0.5816950672782547,\n                    0.571949202546825,\n                    0.5901392043106285,\n                    0.6500354572561916,\n                    0.5927077946378507,\n                    0.5463206836179038,\n                    0.5981414928202714,\n                    0.5702789184140242,\n                    0.5734456368505397,\n                    0.5567470968280711,\n                    0.651934293254853,\n                    0.5691911319141791,\n                    0.4306190994444735,\n                    0.5372546891057586,\n                    0.7035127774427394,\n                    0.6168395500971598,\n                    0.5617976802803071,\n                    0.5802645085442466,\n                    0.4966405650056277,\n                    0.6039793853539581,\n                    0.6511834223281038,\n                    0.7287513587263608,\n                    0.745669846267993,\n                    0.5804877124277869,\n                    0.5446446194941392,\n                    0.53938512292661,\n                    0.6396524485010584,\n                    0.5723241568012822,\n                    0.649234370741908,\n                    0.7074883338681578,\n                    0.5464758703153261,\n                    0.5090429236873975,\n                    0.5434283091022888,\n                    0.5116004996502685,\n                    0.6174406472437227,\n                    0.5087978598917018,\n                    0.509250730202929,\n                    0.5439613489464984,\n                    0.7544609225775453,\n                    0.7669669859696293,\n                    0.716610802653534,\n                    0.5680870230226662,\n                    0.5775208782338036,\n                    0.5773375992029447,\n                    0.5247277673691605,\n                    0.5535865749270432,\n                    0.6858260963884428,\n                    0.5562453976932689,\n                    0.7726041189893659,\n                    0.5670434501062691,\n                    0.638947508181731,\n                    0.7750653084277617,\n                    0.6078011033855205,\n                    0.6037634785722803,\n                    0.7255103091203802,\n                    0.6575023312121234,\n                    0.5200403735107543,\n                    0.6134886283590973,\n                    0.6862031074879724,\n                    0.7311230931089948,\n                    0.5075063560116674,\n                    0.5178183142626915,\n                    0.6977595743954327,\n                    0.5592754628100333,\n                    0.6851287491254223,\n                    0.7351174746159798,\n                    0.6718597919048894,\n                    0.7086729713702142,\n                    0.6444352834446603,\n                    0.6046190394292662,\n                    0.7388374580515082,\n                    0.4820765044064672,\n                    0.5994266259822038,\n                    0.5620651288772057,\n                    0.5788004550034449,\n                    0.7496407152418388,\n                    0.624403461931211,\n                    0.5793327179374579,\n                    0.6810096579802547,\n                    0.6899512171244526,\n                    0.7109019604076005,\n                    0.5985301779546564,\n                    0.6901312300902702,\n                    0.7000433206063224,\n                    0.7503541311808325\n                ],\n                high: 0.82,\n                low: 0.43,\n                mean: 0.62,\n                probFail: 0.0,\n                stdev: 0.08\n            },\n            0.25: {\n                fs_vals: [\n                    0.728402962516075,\n                    0.7539684174546671,\n                    0.7911927258442168,\n                    0.6920886446928274,\n                    0.6518369495430008,\n                    0.8853569511526532,\n                    0.5664197893609432,\n                    0.8137995610350748,\n                    0.6764957061529374,\n                    0.6182589055159936,\n                    0.6705715006724149,\n                    0.7332547920000548,\n                    0.5699174695524745,\n                    0.8216685217604888,\n                    0.6586301034148736,\n                    0.6350555248913328,\n                    0.6300612512404127,\n                    0.6421739479735226,\n                    0.7038087657480093,\n                    0.6490132434476954,\n                    0.6011547436696805,\n                    0.6551880736384751,\n                    0.6227032032215493,\n                    0.6270610440091424,\n                    0.6072153501152305,\n                    0.7098484934750396,\n                    0.626629036145577,\n                    0.4783167195569416,\n                    0.5887631106185122,\n                    0.7651467174816529,\n                    0.67035383372069,\n                    0.6167364315158723,\n                    0.6362832372067494,\n                    0.546593228732726,\n                    0.658677963940987,\n                    0.70892074056729,\n                    0.7882114347367156,\n                    0.8073825184723158,\n                    0.6331814908515401,\n                    0.5929839614257648,\n                    0.5898057837250884,\n                    0.691012737658343,\n                    0.6276150857600952,\n                    0.7057327677551792,\n                    0.7686481710811207,\n                    0.5978574966361289,\n                    0.5591487795995929,\n                    0.5976664016456131,\n                    0.5656186222856082,\n                    0.6744381366741149,\n                    0.5612419114518598,\n                    0.5631925496333001,\n                    0.5997370489390723,\n                    0.8142078524591971,\n                    0.8284537174649083,\n                    0.7767618771612895,\n                    0.6212622473086097,\n                    0.6298366087174617,\n                    0.6310450388908242,\n                    0.577619217665238,\n                    0.6056482699148159,\n                    0.7444939633396064,\n                    0.6070712773165566,\n                    0.834284491077142,\n                    0.6210429951759676,\n                    0.6960499935217389,\n                    0.8387491795488027,\n                    0.6621954098438865,\n                    0.6588721349304106,\n                    0.7844047907438222,\n                    0.7131392042854452,\n                    0.5690902944796218,\n                    0.6684612831944597,\n                    0.7438512219681419,\n                    0.7899961003587377,\n                    0.5604482777855917,\n                    0.5715112763129947,\n                    0.7587008205632754,\n                    0.6106180760060954,\n                    0.7444783890291686,\n                    0.7963047828180807,\n                    0.7297207483616104,\n                    0.7712613120248016,\n                    0.6995855197330354,\n                    0.6568707014934019,\n                    0.7953697666913196,\n                    0.529723623408236,\n                    0.6579350680211822,\n                    0.6162516992304847,\n                    0.6298738097526118,\n                    0.8081907566913499,\n                    0.6826183241604552,\n                    0.6312675021897836,\n                    0.7377197036252602,\n                    0.7514877751270606,\n                    0.7691728277042655,\n                    0.6561014272960891,\n                    0.7484199045625333,\n                    0.755882684695522,\n                    0.812513649165407\n                ],\n                high: 0.89,\n                low: 0.48,\n                mean: 0.68,\n                probFail: 0.0,\n                stdev: 0.09\n            },\n            0.3: {\n                fs_vals: [\n                    0.7913755756743732,\n                    0.8139974610299098,\n                    0.8576607679408564,\n                    0.7505436123287117,\n                    0.706751399538613,\n                    0.9539588493273796,\n                    0.6189688076808071,\n                    0.8791162523681332,\n                    0.7343975002117769,\n                    0.6722698709241608,\n                    0.7298565385358998,\n                    0.7926505341827428,\n                    0.6225061031047904,\n                    0.8858717735453697,\n                    0.7190221775535122,\n                    0.6902127258432157,\n                    0.6898345457841771,\n                    0.6961455892362478,\n                    0.7597074721648229,\n                    0.7072134150234664,\n                    0.6577659873846929,\n                    0.7141866441350774,\n                    0.6769492543872089,\n                    0.68240785048141,\n                    0.6594894809133542,\n                    0.7699704161951813,\n                    0.6859564100568625,\n                    0.5273298374897338,\n                    0.6419540934755721,\n                    0.8290451676847467,\n                    0.7258433778799815,\n                    0.6733924047441909,\n                    0.6941189992819761,\n                    0.5981842547209392,\n                    0.7153633852894579,\n                    0.7687027640307413,\n                    0.8500401929049435,\n                    0.871509766789076,\n                    0.6876381772305935,\n                    0.6431245901226863,\n                    0.6419207978263457,\n                    0.7444491641793526,\n                    0.684787805878225,\n                    0.764252081380689,\n                    0.8321425375850545,\n                    0.651047971738124,\n                    0.6109302513691507,\n                    0.6535325382945908,\n                    0.6210928939471279,\n                    0.7333739142800934,\n                    0.6152569497515835,\n                    0.6187587822702528,\n                    0.6571801550698204,\n                    0.8763483891963189,\n                    0.8923489079858676,\n                    0.839179727138832,\n                    0.6762180883655204,\n                    0.6840895676324087,\n                    0.6865988625104961,\n                    0.632181748907666,\n                    0.6593493987580388,\n                    0.805291572495194,\n                    0.6596578539574272,\n                    0.8984090082186229,\n                    0.6768003263650918,\n                    0.755170633265847,\n                    0.9048563997884675,\n                    0.7185017818547557,\n                    0.7158239640186254,\n                    0.8455254331870378,\n                    0.7709433071300026,\n                    0.6197562961265455,\n                    0.7254048162361862,\n                    0.8036901634371286,\n                    0.8512421273197758,\n                    0.6151055849995468,\n                    0.6268421782279534,\n                    0.8218424754414133,\n                    0.6637236606594623,\n                    0.8060890828250908,\n                    0.859917194624366,\n                    0.7896796777054639,\n                    0.8359773742507265,\n                    0.7567859318159726,\n                    0.7110136450339951,\n                    0.8542816930258951,\n                    0.5789486156985192,\n                    0.7182900510661986,\n                    0.6722068932396197,\n                    0.6828018142584894,\n                    0.8691512406206907,\n                    0.7429249466620571,\n                    0.6849464779916147,\n                    0.7965874174335905,\n                    0.8153325953347171,\n                    0.8297615539662851,\n                    0.7155965426997263,\n                    0.8089305318479703,\n                    0.8139853674633781,\n                    0.8769684275839087\n                ],\n                high: 0.95,\n                low: 0.53,\n                mean: 0.74,\n                probFail: 0.0,\n                stdev: 0.09\n            },\n            0.35: {\n                fs_vals: [\n                    0.8564284262264188,\n                    0.8764230544706981,\n                    0.9265931733520287,\n                    0.8109553236095862,\n                    0.7635405442566982,\n                    1.0252623074817806,\n                    0.6730727238023038,\n                    0.9468728204507085,\n                    0.7943224804829069,\n                    0.7280336792834851,\n                    0.7910520532757537,\n                    0.8542681007723434,\n                    0.6766433324035316,\n                    0.9526102590315776,\n                    0.7812056747854568,\n                    0.7471985527901197,\n                    0.751273781039719,\n                    0.7520878013520953,\n                    0.817797737816546,\n                    0.767315829365295,\n                    0.7161342944832129,\n                    0.775138276893755,\n                    0.7330384691997481,\n                    0.7395162837346828,\n                    0.7135926738397604,\n                    0.8323277316084412,\n                    0.7471459957789514,\n                    0.5776180035718281,\n                    0.6968354765244492,\n                    0.8952566055371142,\n                    0.783356232192255,\n                    0.7317717238574413,\n                    0.7537771805328709,\n                    0.6513921464712908,\n                    0.7740581627904112,\n                    0.8305760332807047,\n                    0.9143200176279319,\n                    0.9381300398662463,\n                    0.7438994720182619,\n                    0.695093675914066,\n                    0.6957476842457856,\n                    0.8000410208247436,\n                    0.743836244191472,\n                    0.8248501701485006,\n                    0.8980202305035387,\n                    0.7060515271444215,\n                    0.664374366371808,\n                    0.711029493704913,\n                    0.6780167724111175,\n                    0.7942740157280324,\n                    0.670824225003432,\n                    0.6759118874704422,\n                    0.71627487699573,\n                    0.9409903993289329,\n                    0.9587601535306629,\n                    0.9039403744626594,\n                    0.732972996749226,\n                    0.7402976869746422,\n                    0.7440153895865516,\n                    0.68839849949134,\n                    0.7147229798507451,\n                    0.8682891664332839,\n                    0.714030681419382,\n                    0.9650852158524649,\n                    0.7343294138709906,\n                    0.8163496909064629,\n                    0.9734848771989677,\n                    0.7767590540194115,\n                    0.7746580897644268,\n                    0.9089775849295961,\n                    0.8309697824099896,\n                    0.6720543929174453,\n                    0.7843521982844526,\n                    0.8657893814694987,\n                    0.9149504642350844,\n                    0.6714375935559989,\n                    0.6837838432336545,\n                    0.8872404427747819,\n                    0.7186170291679947,\n                    0.8700070793653034,\n                    0.9260242406087488,\n                    0.8518002876106826,\n                    0.9028913716775067,\n                    0.8160946530008589,\n                    0.767103196018085,\n                    0.9156895622156456,\n                    0.6297385636716313,\n                    0.7804966535223168,\n                    0.7299352959115976,\n                    0.7376225193978175,\n                    0.9326311874799944,\n                    0.8053298202515028,\n                    0.7404196371816641,\n                    0.8576881666135612,\n                    0.8815152783696882,\n                    0.8927455255550306,\n                    0.7770161081698709,\n                    0.8717279695342258,\n                    0.8744422150958368,\n                    0.9438184641769995\n                ],\n                high: 1.03,\n                low: 0.58,\n                mean: 0.8,\n                probFail: 0.01,\n                stdev: 0.09\n            },\n            0.4: {\n                fs_vals: [\n                    0.9237107284166072,\n                    0.9414034945296167,\n                    0.9981314627280095,\n                    0.8734857733552692,\n                    0.8223500636815495,\n                    1.0994914338959618,\n                    0.7288247882046974,\n                    1.0172616618724042,\n                    0.856395586342448,\n                    0.7856741509353137,\n                    0.8542827058888193,\n                    0.918270403443016,\n                    0.7324300772028742,\n                    1.0220808316042793,\n                    0.8453009554050099,\n                    0.8061368950989372,\n                    0.8144847891815147,\n                    0.8101198750242478,\n                    0.8782357747230065,\n                    0.8294217898830327,\n                    0.7763283855606945,\n                    0.8381370613395127,\n                    0.7910802127567014,\n                    0.7985098699284949,\n                    0.7696317733432432,\n                    0.8970395332238056,\n                    0.8102615187985861,\n                    0.6292205425981447,\n                    0.7535022347336923,\n                    0.9639332195482433,\n                    0.8430311439009,\n                    0.7919746437285418,\n                    0.8153578069590458,\n                    0.7062751287487705,\n                    0.8348741007082136,\n                    0.8946861725245842,\n                    0.9812338472906161,\n                    1.0074262581683973,\n                    0.802099024272228,\n                    0.7489971054441603,\n                    0.751389502756361,\n                    0.8579549022075564,\n                    0.8048435364313341,\n                    0.8876828683857728,\n                    0.9664304337932625,\n                    0.7629550804893154,\n                    0.7195486186759095,\n                    0.7702536211892547,\n                    0.7364776518696808,\n                    0.857261479298486,\n                    0.728013323574614,\n                    0.7347024366977524,\n                    0.7770999249019885,\n                    1.008345953325934,\n                    1.027902879729714,\n                    0.9712236694135614,\n                    0.791635767327238,\n                    0.7985622705257542,\n                    0.8034007452509343,\n                    0.7463399606805082,\n                    0.771893237948375,\n                    0.9336592586374461,\n                    0.7703014098443323,\n                    1.034528302082489,\n                    0.7937363980114658,\n                    0.8797247905113067,\n                    1.044843961470291,\n                    0.8370990841147066,\n                    0.8355094318328709,\n                    0.9749710580874996,\n                    0.8933656098910921,\n                    0.7260843396792059,\n                    0.8454286417175159,\n                    0.9303169945488023,\n                    0.9813104102178305,\n                    0.7294853095823567,\n                    0.7423977896631072,\n                    0.9550551829671763,\n                    0.7754101827676563,\n                    0.9363759869975876,\n                    0.9947966848616568,\n                    0.9162466195021453,\n                    0.9721838204067141,\n                    0.8776641375154838,\n                    0.8252851050225832,\n                    0.9798076611572267,\n                    0.6821574780669877,\n                    0.8446597451655007,\n                    0.7895327114873592,\n                    0.794460169384445,\n                    0.9988407709810841,\n                    0.8699318996832912,\n                    0.797828164988701,\n                    0.9211952420768352,\n                    0.9501641009061548,\n                    0.9583002254914988,\n                    0.8404558671829737,\n                    0.9369759081047494,\n                    0.9374395361855336,\n                    1.0132737465226211\n                ],\n                high: 1.1,\n                low: 0.63,\n                mean: 0.86,\n                probFail: 0.09,\n                stdev: 0.1\n            },\n            0.45: {\n                fs_vals: [\n                    0.9934703933179587,\n                    1.009193472737755,\n                    1.0725216212911026,\n                    0.938388412725098,\n                    0.8834124247835705,\n                    1.1769833236036389,\n                    0.7863982865348633,\n                    1.0905811033179444,\n                    0.9208331228034929,\n                    0.8453993446221709,\n                    0.9197654565044395,\n                    0.9849163567719799,\n                    0.7900471048545716,\n                    1.094585677080134,\n                    0.9115201803406664,\n                    0.867238160290596,\n                    0.8796626995582435,\n                    0.8704464705961952,\n                    0.941268538246597,\n                    0.8937227295611904,\n                    0.8385025982997185,\n                    0.9033678837135892,\n                    0.8512688746982741,\n                    0.8595979806068258,\n                    0.8277957385621328,\n                    0.9643183449036605,\n                    0.8754556251489408,\n                    0.6822490217357211,\n                    0.812131592156578,\n                    1.0353290392427001,\n                    0.9050956968458781,\n                    0.8541883071754187,\n                    0.8790501212429152,\n                    0.7629690316728461,\n                    0.898011690677006,\n                    0.961273833946814,\n                    1.0510657020351388,\n                    1.0796856865484195,\n                    0.8624558681466139,\n                    0.8050196487593657,\n                    0.8090306118801691,\n                    0.9184453493029073,\n                    0.8679801763623448,\n                    0.9529995770054882,\n                    1.0376233265353483,\n                    0.8219274211878718,\n                    0.7765990591047506,\n                    0.8313860663900181,\n                    0.7966442940953125,\n                    0.9225516912791866,\n                    0.7869753287032698,\n                    0.795263852430522,\n                    0.8398207953212216,\n                    1.078730148797451,\n                    1.100097845383129,\n                    1.0413107022855137,\n                    0.8524008863320235,\n                    0.8590687679286846,\n                    0.8649477375009291,\n                    0.8061594077708834,\n                    0.8310669318028256,\n                    1.001672113642186,\n                    0.8286643699999808,\n                    1.1070594268114253,\n                    0.8552138120507776,\n                    0.9455272680809198,\n                    1.1192509396074393,\n                    0.8997429390072748,\n                    0.8986021837780239,\n                    1.0438152933399063,\n                    0.9583705166577018,\n                    0.782024665221199,\n                    0.908849380808661,\n                    0.9975381225972,\n                    1.0506119496675732,\n                    0.7893700543343755,\n                    0.8028287469105073,\n                    1.0255480825631202,\n                    0.8342984943254285,\n                    1.005437329780686,\n                    1.0665079846434882,\n                    0.9832789749586677,\n                    1.0441370732309239,\n                    0.9417389409838491,\n                    0.8857919554293937,\n                    1.0469492405440528,\n                    0.7363440841343132,\n                    0.9109768975173363,\n                    0.8511812868570687,\n                    0.8535231984847258,\n                    1.0680917530521403,\n                    0.9369227491387732,\n                    0.8573974620205166,\n                    0.9873777021361302,\n                    1.0215070723125141,\n                    1.026699931799774,\n                    0.9061031938955783,\n                    1.0049358301696578,\n                    1.003259590356987,\n                    1.0856485174084625\n                ],\n                high: 1.18,\n                low: 0.68,\n                mean: 0.92,\n                probFail: 0.28,\n                stdev: 0.1\n            },\n            0.5: {\n                fs_vals: [\n                    1.066051546704463,\n                    1.0801490043525566,\n                    1.1501174388446742,\n                    1.0060055168314492,\n                    0.9470452204246298,\n                    1.2581908367070858,\n                    0.8460424189084301,\n                    1.1672364655461345,\n                    0.9879430894515187,\n                    0.9074990272155133,\n                    0.9878069764873877,\n                    1.0545624373767681,\n                    0.8497505128331851,\n                    1.1705356290184914,\n                    0.9801622001399447,\n                    0.930797484112593,\n                    0.9470855106759387,\n                    0.9333594806694894,\n                    1.0072370435642293,\n                    0.9604991193021217,\n                    0.9028954390342065,\n                    0.9711062414147069,\n                    0.9138835163812229,\n                    0.9230727546214105,\n                    0.8883562825201977,\n                    1.034473743058179,\n                    0.9429692148098222,\n                    0.7368821265949227,\n                    0.8729809767252332,\n                    1.1098011926249909,\n                    0.9698673772920934,\n                    0.9186831588411558,\n                    0.9451302063758751,\n                    0.821686513585989,\n                    0.963761534376375,\n                    1.0306743160829208,\n                    1.1242043871325753,\n                    1.1553031316008533,\n                    0.9252722088078279,\n                    0.8634268983103421,\n                    0.8689352805043877,\n                    0.9818583708941171,\n                    0.9335039042377368,\n                    1.021142919158559,\n                    1.1119531428319864,\n                    0.883219999109034,\n                    0.8357498591001109,\n                    0.8946880960075203,\n                    0.8587596102698446,\n                    0.9904510678322749,\n                    0.8479388074803969,\n                    0.8578090667454117,\n                    0.9046853161181018,\n                    1.1525642582137727,\n                    1.1757734482747482,\n                    1.1145852030172692,\n                    0.9155469450749517,\n                    0.9220890897804231,\n                    0.9289352874432669,\n                    0.8680905083046236,\n                    0.8925296036352757,\n                    1.0726956989175853,\n                    0.8893959567996079,\n                    1.1831085703484514,\n                    0.9190381456367338,\n                    1.0140818935588984,\n                    1.1971324685264622,\n                    0.9650004126545024,\n                    0.964247586154434,\n                    1.1159201033056736,\n                    1.0263202593348333,\n                    0.8401307314905176,\n                    0.9749201616018371,\n                    1.0678166969269922,\n                    1.1232497071884155,\n                    0.8512929393940157,\n                    0.8653013933619076,\n                    1.0990816600171631,\n                    0.8955598098878353,\n                    1.0775334675636068,\n                    1.1415384346998076,\n                    1.0532539689608238,\n                    1.1191328852259306,\n                    1.008656819137714,\n                    0.948943210696163,\n                    1.1175312854014934,\n                    0.7925110974805952,\n                    0.9797349344725353,\n                    0.9151474498330344,\n                    0.9151049029269936,\n                    1.1408017292691648,\n                    1.0065882893442566,\n                    0.9194349069625154,\n                    1.056601976564671,\n                    1.095874944030382,\n                    1.0983214012847726,\n                    0.9742359587468111,\n                    1.0759691614079194,\n                    1.0722843745416726,\n                    1.1613613510561316\n                ],\n                high: 1.26,\n                low: 0.74,\n                mean: 0.99,\n                probFail: 0.42,\n                stdev: 0.11\n            },\n            0.55: {\n                fs_vals: [\n                    1.1418993024700828,\n                    1.1547373060639081,\n                    1.2313890741026992,\n                    1.0767731996296732,\n                    1.0136561332720397,\n                    1.3436930991965577,\n                    0.9080840490930342,\n                    1.2477484297475328,\n                    1.058130880642291,\n                    0.9723483927281698,\n                    1.058807494557654,\n                    1.12767032018764,\n                    0.9118734913423827,\n                    1.2504600895692681,\n                    1.051614772367539,\n                    0.9971989362545781,\n                    1.017115048978242,\n                    0.9992444896341076,\n                    1.0765848816391215,\n                    1.0301245686342286,\n                    0.9698325024752777,\n                    1.041722799727007,\n                    0.9792925540551434,\n                    0.9893125100566054,\n                    0.9516730892880604,\n                    1.1079203280797862,\n                    1.013134890815195,\n                    0.7933650363495055,\n                    0.9363911429863121,\n                    1.1878171946342324,\n                    1.0377600687682051,\n                    0.9858153484804942,\n                    1.013964187819686,\n                    0.8827199902280738,\n                    1.0325104027066625,\n                    1.103323449538034,\n                    1.201153208500851,\n                    1.2347903945280212,\n                    0.9909376570321468,\n                    0.9245712904870519,\n                    0.931451437804601,\n                    1.0486402896095004,\n                    1.0017639615587344,\n                    1.0925549189211252,\n                    1.1898866124292646,\n                    0.9471717619784676,\n                    0.8973067265020293,\n                    0.960502693256239,\n                    0.9231404717709478,\n                    1.0613616479965116,\n                    0.9112109453689928,\n                    0.9226316137491887,\n                    0.9720248731054837,\n                    1.2303859130425432,\n                    1.2554755303629173,\n                    1.1915416609973375,\n                    0.9814405184374535,\n                    0.987987948738791,\n                    0.995732922218738,\n                    0.9324495683898743,\n                    0.956648587729648,\n                    1.1472026228478964,\n                    0.9528591462967797,\n                    1.2632246793154722,\n                    0.9855731240145316,\n                    1.0858125688325757,\n                    1.279033711115883,\n                    1.0332753349131834,\n                    1.0328482535341827,\n                    1.1918042890133778,\n                    1.097654946823367,\n                    0.9007379859048165,\n                    1.04404302453005,\n                    1.1416234247791417,\n                    1.1997329864594874,\n                    0.915537673301949,\n                    0.9301217959891437,\n                    1.1761263695528905,\n                    0.9595588081639872,\n                    1.1531157219439545,\n                    1.2203849348190579,\n                    1.126631248165621,\n                    1.1976582782514764,\n                    1.0788556903807378,\n                    1.0151512085077166,\n                    1.1920857148355655,\n                    0.8509482487677908,\n                    1.0513126666533887,\n                    0.9817851342489475,\n                    0.9795891792723211,\n                    1.2175049333191479,\n                    1.0793149081380762,\n                    0.9843343078146416,\n                    1.1293398153141239,\n                    1.1737091021588084,\n                    1.1736533257514439,\n                    1.0452264935538944,\n                    1.1505453601186315,\n                    1.1450053546439836,\n                    1.2409434526488206\n                ],\n                high: 1.34,\n                low: 0.79,\n                mean: 1.06,\n                probFail: 0.62,\n                stdev: 0.11\n            },\n            0.6: {\n                fs_vals: [\n                    1.2215733894174083,\n                    1.233554079782464,\n                    1.3169394336948514,\n                    1.1512352311606222,\n                    1.0837558838478722,\n                    1.43421605097894,\n                    0.9729364995636532,\n                    1.3327707800381559,\n                    1.131912341270658,\n                    1.0404193527236956,\n                    1.1332726596273557,\n                    1.204822644488199,\n                    0.9768353797590457,\n                    1.3350259117447172,\n                    1.1263652416267367,\n                    1.066927252399257,\n                    1.09020624312396,\n                    1.068593850519437,\n                    1.149874092549439,\n                    1.1030770225053554,\n                    1.0397356610343786,\n                    1.1156947562240143,\n                    1.0479652803055035,\n                    1.0587929260018063,\n                    1.0182054631605881,\n                    1.1851924343693578,\n                    1.0863866132676065,\n                    0.85201450445705,\n                    1.00279604041833,\n                    1.2699705172096882,\n                    1.109297899944583,\n                    1.0560365658583815,\n                    1.0860187233737426,\n                    0.9464500655450954,\n                    1.1047540292814084,\n                    1.179771609574425,\n                    1.2825480607097046,\n                    1.3187943722302518,\n                    1.0599412374936326,\n                    0.9889041160273825,\n                    0.9970211491954097,\n                    1.1193539626354494,\n                    1.0732117378516184,\n                    1.167791439928453,\n                    1.2720192253345128,\n                    1.0142199913064058,\n                    0.9616659909771845,\n                    1.0292636331483007,\n                    0.9901852098408113,\n                    1.1357933972001368,\n                    0.9771852715878919,\n                    0.9901128524594109,\n                    1.042262791828321,\n                    1.3128684808170519,\n                    1.339886750081046,\n                    1.2728022381229718,\n                    1.050547162332167,\n                    1.0572353221811943,\n                    1.0658121725022918,\n                    0.9996441188682986,\n                    1.02388378943617,\n                    1.2257858423737442,\n                    1.0195148284059787,\n                    1.3480952896105165,\n                    1.0552802688388505,\n                    1.1612558933952108,\n                    1.3656372350223644,\n                    1.1050784337969086,\n                    1.1049105045031806,\n                    1.27211375873873,\n                    1.1729346536834653,\n                    0.9642718557196011,\n                    1.1167293438069061,\n                    1.219551992135513,\n                    1.280704238492129,\n                    0.9824786460625646,\n                    0.9976852064925046,\n                    1.257276028053387,\n                    1.0267582786925915,\n                    1.2327600764120474,\n                    1.3036788901950012,\n                    1.2039886976394243,\n                    1.2803210957472968,\n                    1.1528884010195726,\n                    1.0849347647227865,\n                    1.2712792642794195,\n                    0.9120307556695376,\n                    1.1261914277696818,\n                    1.0515459870469877,\n                    1.0474631518690127,\n                    1.2988718868595273,\n                    1.1556022136353827,\n                    1.0525882384630734,\n                    1.2061845620453295,\n                    1.2555768232793274,\n                    1.2533138919970408,\n                    1.1195526286813702,\n                    1.2292581255073498,\n                    1.222041346872431,\n                    1.325056849795074\n                ],\n                high: 1.43,\n                low: 0.85,\n                mean: 1.13,\n                probFail: 0.85,\n                stdev: 0.12\n            },\n            0.65: {\n                fs_vals: [\n                    1.3057723572142508,\n                    1.3173508976032182,\n                    1.407531101978715,\n                    1.2300670774407714,\n                    1.157980697126443,\n                    1.5306656815351058,\n                    1.041116575812643,\n                    1.4231198300623835,\n                    1.2099362283649036,\n                    1.1123008199845532,\n                    1.2118350582185515,\n                    1.2867491348744782,\n                    1.0451590903871026,\n                    1.425067856514265,\n                    1.2050209079106695,\n                    1.140588698656993,\n                    1.1669257140245068,\n                    1.1420284985449891,\n                    1.2278107507740201,\n                    1.1799589450171692,\n                    1.1131403412753718,\n                    1.193626064619416,\n                    1.1204920600431743,\n                    1.1321073730087765,\n                    1.088532315909336,\n                    1.2669681129838004,\n                    1.1632775703429061,\n                    0.9132306820186746,\n                    1.072740991653335,\n                    1.357006811817968,\n                    1.1851384902859594,\n                    1.1299127399483533,\n                    1.1618804649322665,\n                    1.013361190316761,\n                    1.18111880258483,\n                    1.260707827253517,\n                    1.3691864870886106,\n                    1.4081264210161566,\n                    1.1328926309332463,\n                    1.0569955154648893,\n                    1.0661994256759404,\n                    1.194704658600649,\n                    1.148419809981741,\n                    1.2475467796827036,\n                    1.3591019189660363,\n                    1.0849191046924536,\n                    1.029331131789455,\n                    1.1015132524749736,\n                    1.0603895262331504,\n                    1.2143860639051205,\n                    1.0463573174760061,\n                    1.0607368601098692,\n                    1.1159312577492226,\n                    1.400852106852056,\n                    1.4298579118469374,\n                    1.3591447558331011,\n                    1.1234512052752115,\n                    1.1304272186805333,\n                    1.1397667338518662,\n                    1.0701894521219868,\n                    1.0948073968926664,\n                    1.309185128374117,\n                    1.0899416836384177,\n                    1.4385781204725259,\n                    1.1287383153321158,\n                    1.2410845793670144,\n                    1.4577940245291081,\n                    1.1810496018536385,\n                    1.1810662588911391,\n                    1.3576511435520962,\n                    1.2528647479599448,\n                    1.0312657517987762,\n                    1.19362216051984,\n                    1.302345775334759,\n                    1.3669685648282588,\n                    1.0525961483224984,\n                    1.068491740880249,\n                    1.3432740297722336,\n                    1.0977390224989327,\n                    1.3171929663902695,\n                    1.3922149750938488,\n                    1.2860481349234167,\n                    1.3678769156638861,\n                    1.2314473828658536,\n                    1.1589421993343867,\n                    1.3559446472898158,\n                    0.9762348887936143,\n                    1.2049750096089973,\n                    1.1249982262420894,\n                    1.1193386022124627,\n                    1.3857404990822877,\n                    1.236084758991148,\n                    1.1248096443271758,\n                    1.2878779403689997,\n                    1.3421964968956797,\n                    1.3380790044135291,\n                    1.1978177430405061,\n                    1.3128520799215841,\n                    1.304167016273017,\n                    1.4145244926337273\n                ],\n                high: 1.53,\n                low: 0.91,\n                mean: 1.21,\n                probFail: 0.98,\n                stdev: 0.13\n            },\n            0.7: {\n                fs_vals: [\n                    1.3953710869372808,\n                    1.4070763249499516,\n                    1.5041274692268862,\n                    1.314112669933406,\n                    1.2371267678696969,\n                    1.6341778689377398,\n                    1.1132717236383067,\n                    1.519818983547866,\n                    1.2930189337948768,\n                    1.188730253693448,\n                    1.2952878848425582,\n                    1.3743662702567376,\n                    1.1174987534839043,\n                    1.5216343581127856,\n                    1.2883412302465482,\n                    1.218943501348939,\n                    1.2479815659206215,\n                    1.2203313749006452,\n                    1.3112835242570744,\n                    1.2615290975337945,\n                    1.190723280122963,\n                    1.2762792552132252,\n                    1.1976157643597243,\n                    1.2099986352030403,\n                    1.1633830972314256,\n                    1.3541057202380786,\n                    1.244508850410953,\n                    0.9775171710939488,\n                    1.1469114248656351,\n                    1.4498640977596442,\n                    1.2661084860582905,\n                    1.2081537852011863,\n                    1.2422869026172065,\n                    1.0840667819236391,\n                    1.2623952614418825,\n                    1.3469968901384024,\n                    1.4620713565590038,\n                    1.5038066569151805,\n                    1.2105550039424857,\n                    1.129565137842565,\n                    1.1396836777964914,\n                    1.2755788089279705,\n                    1.2281120075474992,\n                    1.332691282934747,\n                    1.4520817076195254,\n                    1.1599700187086006,\n                    1.100939064097128,\n                    1.1779308885697837,\n                    1.1343723447105596,\n                    1.297943255005562,\n                    1.1193501445505134,\n                    1.1351150404746795,\n                    1.1936988180280843,\n                    1.4953900800803694,\n                    1.5264548723839697,\n                    1.4515450995723316,\n                    1.2008867541569184,\n                    1.208317622324945,\n                    1.2183439719170814,\n                    1.144735298106536,\n                    1.1701345837266122,\n                    1.3983273312521327,\n                    1.1648670661878255,\n                    1.5357483493900692,\n                    1.2066738116704487,\n                    1.3261435736372624,\n                    1.5565701802697833,\n                    1.2619922593501327,\n                    1.2621069698065301,\n                    1.4494201500047152,\n                    1.3383342386643216,\n                    1.1023893426316311,\n                    1.2755306467173233,\n                    1.3909383223594451,\n                    1.4595379285633472,\n                    1.1265010480778532,\n                    1.1431720198563884,\n                    1.43505350581345,\n                    1.1732308211169467,\n                    1.4073305643990297,\n                    1.4869944949335336,\n                    1.3737144948194617,\n                    1.4612701781897868,\n                    1.3154022103229333,\n                    1.2379864913231358,\n                    1.4471267530589038,\n                    1.0441627942360892,\n                    1.2884213720482602,\n                    1.2028565129017326,\n                    1.195984889394755,\n                    1.4791623758027497,\n                    1.3215657836291061,\n                    1.2017650413436753,\n                    1.3753505556872512,\n                    1.4344762652620866,\n                    1.4289247370574625,\n                    1.28078246668405,\n                    1.4022632491783533,\n                    1.3923555013296238,\n                    1.5103755511574972\n                ],\n                high: 1.63,\n                low: 0.98,\n                mean: 1.29,\n                probFail: 0.99,\n                stdev: 0.14\n            },\n            0.75: {\n                fs_vals: [\n                    1.491476227123237,\n                    1.50393629107602,\n                    1.6079535932134381,\n                    1.4044383174077877,\n                    1.322200946920419,\n                    1.746191124245967,\n                    1.190220635793921,\n                    1.6241640385367786,\n                    1.3821959778578592,\n                    1.270640338838749,\n                    1.3846349558613225,\n                    1.4688355843161378,\n                    1.1946809011632744,\n                    1.6260544857030592,\n                    1.377285719852598,\n                    1.3029538914221734,\n                    1.334267887097746,\n                    1.3044968894853077,\n                    1.4014202586960947,\n                    1.3487500489970787,\n                    1.273344476352306,\n                    1.3646230906102128,\n                    1.2802785143628912,\n                    1.2934058955512988,\n                    1.2436837329057853,\n                    1.4476981082657168,\n                    1.330972841146503,\n                    1.0455118404832837,\n                    1.2261758217872867,\n                    1.5497321333644656,\n                    1.3532559699989806,\n                    1.2916580915965594,\n                    1.3281725247992815,\n                    1.1593472202029516,\n                    1.349587858117709,\n                    1.439734130959949,\n                    1.5624748377303683,\n                    1.6071289415550978,\n                    1.293893447716683,\n                    1.2075275589728327,\n                    1.2183575684839782,\n                    1.3631006583259766,\n                    1.3132085489512333,\n                    1.424326684744569,\n                    1.5521616521220434,\n                    1.2402640320393066,\n                    1.177299735339291,\n                    1.2593754487259399,\n                    1.212914587463241,\n                    1.3874830636745514,\n                    1.1969529736092468,\n                    1.2140236996691938,\n                    1.2764119137243588,\n                    1.5978163928888898,\n                    1.6310269076452677,\n                    1.5512394220420491,\n                    1.283783857366243,\n                    1.2918659528592673,\n                    1.3024918640973064,\n                    1.2241061290245199,\n                    1.2507688757345479,\n                    1.4943854688693998,\n                    1.2452128517743124,\n                    1.6409675398951404,\n                    1.2900067523463334,\n                    1.417503494516984,\n                    1.6633151513984155,\n                    1.3489241791276236,\n                    1.3490337719865957,\n                    1.5486900924847498,\n                    1.4304722189075993,\n                    1.178490663492068,\n                    1.3634811775638616,\n                    1.486512790824572,\n                    1.5596958074357792,\n                    1.2049723902702094,\n                    1.2225261130073828,\n                    1.5337965292509341,\n                    1.2541584278218245,\n                    1.504336781671589,\n                    1.589289079921609,\n                    1.468133423677997,\n                    1.5616944967536712,\n                    1.4058548609909387,\n                    1.3230969848440475,\n                    1.546149797846622,\n                    1.1165799088894188,\n                    1.3774901030016742,\n                    1.2860266668924674,\n                    1.2783776187739788,\n                    1.5804702720235646,\n                    1.4130675681167515,\n                    1.284423334295938,\n                    1.4697812571324915,\n                    1.5335713030577884,\n                    1.5270895558923454,\n                    1.3694121962250363,\n                    1.4986785754951357,\n                    1.4878406668919637,\n                    1.6139114592969726\n                ],\n                high: 1.75,\n                low: 1.05,\n                mean: 1.38,\n                probFail: 1.0,\n                stdev: 0.15\n            },\n            0.8: {\n                fs_vals: [\n                    1.5955073103701287,\n                    1.6094824790006474,\n                    1.7205856442845806,\n                    1.5024112346099838,\n                    1.41449472816232,\n                    1.8685525438069737,\n                    1.2730129604714435,\n                    1.7378184618799333,\n                    1.4787976355260737,\n                    1.3592273199569807,\n                    1.4811640873847256,\n                    1.571648893845602,\n                    1.2777648875478713,\n                    1.7400356531604513,\n                    1.4730841430741908,\n                    1.3938545188533211,\n                    1.4269300715118391,\n                    1.3958035614481363,\n                    1.4996707214791267,\n                    1.442858210345416,\n                    1.3621093998839777,\n                    1.4599029382454747,\n                    1.3696904074419072,\n                    1.3835335311804857,\n                    1.3306241715165126,\n                    1.549152353660371,\n                    1.423817693008122,\n                    1.1180327362437876,\n                    1.3116489641911695,\n                    1.6581394610407838,\n                    1.4479272202442715,\n                    1.3815779943557924,\n                    1.420736832775365,\n                    1.2402062494551929,\n                    1.4439881864306245,\n                    1.5403256563964605,\n                    1.6720318389716589,\n                    1.7197558558739712,\n                    1.3841457882752295,\n                    1.292059039174419,\n                    1.3033554796481719,\n                    1.4587149246499016,\n                    1.4048927934026438,\n                    1.5238669814559431,\n                    1.6608888397150388,\n                    1.3269476048530453,\n                    1.2594547820580715,\n                    1.3469480278392425,\n                    1.2970161603366366,\n                    1.4843124200636246,\n                    1.2801783617098796,\n                    1.2984599797688694,\n                    1.365156277751782,\n                    1.7098440703074511,\n                    1.745306192355199,\n                    1.659814962353778,\n                    1.373336361383473,\n                    1.3823069685411404,\n                    1.393428084572199,\n                    1.3093608571530457,\n                    1.3378684569891646,\n                    1.598864951767383,\n                    1.3321627660320472,\n                    1.7559839817067766,\n                    1.3799176775515738,\n                    1.516538964997602,\n                    1.7797611210326603,\n                    1.4431519720800559,\n                    1.4431308627303843,\n                    1.6570896380923286,\n                    1.5307305544586463,\n                    1.2606580011420438,\n                    1.4587923145488209,\n                    1.590588801762595,\n                    1.6690915456391706,\n                    1.2890134712135555,\n                    1.3075813444794278,\n                    1.6410207553842446,\n                    1.3417091059022677,\n                    1.6097083729052086,\n                    1.7007339050364092,\n                    1.5707754075386722,\n                    1.6706805344802915,\n                    1.5042205361451293,\n                    1.4155949463673472,\n                    1.6547149999094721,\n                    1.1944703880074237,\n                    1.473412303172201,\n                    1.3756715746478168,\n                    1.3677700065134335,\n                    1.691376298685455,\n                    1.511905757736476,\n                    1.3740270466829947,\n                    1.572683778154126,\n                    1.6409680809817309,\n                    1.634165242334951,\n                    1.464947236777086,\n                    1.6036229654504504,\n                    1.5922078810091875,\n                    1.7268019417455815\n                ],\n                high: 1.87,\n                low: 1.12,\n                mean: 1.48,\n                probFail: 1.0,\n                stdev: 0.16\n            },\n            0.85: {\n                fs_vals: [\n                    1.7093165121221503,\n                    1.725743095169607,\n                    1.8440834652413753,\n                    1.6098151964171512,\n                    1.5156933537642612,\n                    2.003673992936112,\n                    1.363017629337649,\n                    1.8629539241902715,\n                    1.584560887443221,\n                    1.456051901106213,\n                    1.5865555760365306,\n                    1.684754172554465,\n                    1.3681321544866754,\n                    1.8658078222612242,\n                    1.577340196677854,\n                    1.4932565105326323,\n                    1.5274613199323117,\n                    1.495921598377608,\n                    1.6079288828161613,\n                    1.5454676798477363,\n                    1.4584615279411557,\n                    1.5637452503443772,\n                    1.4674312971625854,\n                    1.4819526934011267,\n                    1.4257584527329021,\n                    1.6603080198092888,\n                    1.5245433294368806,\n                    1.1961464271167803,\n                    1.404785631674738,\n                    1.777082163342644,\n                    1.5518801836093918,\n                    1.4794166879862805,\n                    1.521545128578319,\n                    1.3279549445654852,\n                    1.547283540207421,\n                    1.6506068954631974,\n                    1.7928780019904658,\n                    1.8438589876328704,\n                    1.4829270746424652,\n                    1.384696446932146,\n                    1.3961579455195459,\n                    1.5643088096280966,\n                    1.5047104328503147,\n                    1.6331577919195508,\n                    1.7802846310881075,\n                    1.4215185498665224,\n                    1.3487647634289783,\n                    1.4420845499088233,\n                    1.3879801554831985,\n                    1.590137102803998,\n                    1.3703470845410526,\n                    1.3897251709025886,\n                    1.4613480185089367,\n                    1.8337100731449354,\n                    1.8715543557823981,\n                    1.7793440753992147,\n                    1.4711023538745165,\n                    1.4812544856555734,\n                    1.492742365323295,\n                    1.4018815449264759,\n                    1.4329439641879327,\n                    1.7137307602763892,\n                    1.4272620198114518,\n                    1.8830805639372457,\n                    1.4779469893445412,\n                    1.625044431719046,\n                    1.9081694836836933,\n                    1.5463811953342308,\n                    1.5460738415750672,\n                    1.7767447570803758,\n                    1.6410062110352277,\n                    1.3503114733312496,\n                    1.5631857895540209,\n                    1.7051506894662547,\n                    1.7898796333080558,\n                    1.379935550411777,\n                    1.3996782638082268,\n                    1.7587074153989406,\n                    1.4374325660192615,\n                    1.725400935874048,\n                    1.8234655353852205,\n                    1.683559925128699,\n                    1.7902254568315126,\n                    1.6123470433813882,\n                    1.5172050929738188,\n                    1.7750445151093979,\n                    1.2791195266505202,\n                    1.5777940811289788,\n                    1.4733088789558129,\n                    1.4657984390763596,\n                    1.8141167039352875,\n                    1.6197997497617715,\n                    1.4721973220733506,\n                    1.6860345819380398,\n                    1.7586093130403766,\n                    1.7522312087130485,\n                    1.569006888648981,\n                    1.7190879069558447,\n                    1.7075279558236771,\n                    1.8512263745687263\n                ],\n                high: 2.0,\n                low: 1.2,\n                mean: 1.59,\n                probFail: 1.0,\n                stdev: 0.17\n            },\n            0.9: {\n                fs_vals: [\n                    1.8353689969539828,\n                    1.8554201557820307,\n                    1.9811907105463127,\n                    1.7290244866731852,\n                    1.6280400289509516,\n                    2.1547672104130196,\n                    1.4620559724822932,\n                    2.0024618964380356,\n                    1.7017982856805374,\n                    1.5631911963569791,\n                    1.7030456694234979,\n                    1.8107452071676968,\n                    1.4676206678468302,\n                    2.0063407201691046,\n                    1.692187614483808,\n                    1.6033042543760643,\n                    1.6378479478677463,\n                    1.6070752376521191,\n                    1.7287172546755105,\n                    1.6587269940611704,\n                    1.5643222532905166,\n                    1.6783153988024042,\n                    1.5756043393616843,\n                    1.5907542735963422,\n                    1.5311557186079043,\n                    1.7836158117848513,\n                    1.6351467252371688,\n                    1.2812713059456953,\n                    1.5075219507573931,\n                    1.9092180149483675,\n                    1.6674555275619014,\n                    1.5871743432547505,\n                    1.6326805773397646,\n                    1.4243387294556271,\n                    1.6617208121570755,\n                    1.773021232810212,\n                    1.9278576495831432,\n                    1.9823303484213395,\n                    1.592386886818837,\n                    1.4874865904557457,\n                    1.4987355751546552,\n                    1.6823958156856669,\n                    1.614719411227944,\n                    1.7546561102970728,\n                    1.9130411852763824,\n                    1.52597137877427,\n                    1.4470410572827173,\n                    1.546695386056397,\n                    1.4875396326288837,\n                    1.7072276092649197,\n                    1.4692162888666498,\n                    1.4895507220890565,\n                    1.5668710817461353,\n                    1.9723933971406555,\n                    2.01278302124447,\n                    1.9125860914242179,\n                    1.5791556324795688,\n                    1.590858069066421,\n                    1.602550954779458,\n                    1.5035074357216935,\n                    1.5380056584940813,\n                    1.8415989056673194,\n                    1.5325675558519043,\n                    2.025297343882749,\n                    1.5861447019141253,\n                    1.745408743260019,\n                    2.0515513001032466,\n                    1.660882301688458,\n                    1.6600928619385882,\n                    1.9104861727489921,\n                    1.7638257671639508,\n                    1.4493411043663025,\n                    1.6789539031362142,\n                    1.8328407219883551,\n                    1.9249295472595982,\n                    1.4794846841770648,\n                    1.5006005781775988,\n                    1.8894941700813253,\n                    1.543391656749339,\n                    1.8540190340750102,\n                    1.9603298045716855,\n                    1.8090424111942838,\n                    1.9229876639059087,\n                    1.7326946806341492,\n                    1.6302235626843222,\n                    1.9100981051865087,\n                    1.372238365236445,\n                    1.6927726336434246,\n                    1.5809583904097184,\n                    1.5746416385268993,\n                    1.9516698539304858,\n                    1.739039530353368,\n                    1.5810919246047135,\n                    1.8124653983295842,\n                    1.8890826544609478,\n                    1.8840569360153536,\n                    1.6837466276738,\n                    1.8477253132153801,\n                    1.836558895340536,\n                    1.9900863932112587\n                ],\n                high: 2.15,\n                low: 1.28,\n                mean: 1.7,\n                probFail: 1.0,\n                stdev: 0.18\n            },\n            0.95: {\n                fs_vals: [\n                    1.977022012176821,\n                    2.0021951667567004,\n                    2.1356450435896823,\n                    1.8632729326737647,\n                    1.7545899924596196,\n                    2.3262076336586297,\n                    1.5726077713259663,\n                    2.1602811176237444,\n                    1.8336595200583836,\n                    1.6834738783209375,\n                    1.833679620337596,\n                    1.953155218643253,\n                    1.5787329454701144,\n                    2.165680105655308,\n                    1.8205317071808405,\n                    1.7269180940415187,\n                    1.7607942044322729,\n                    1.7322942822106167,\n                    1.8654723775454205,\n                    1.7855619983208457,\n                    1.6823078313425828,\n                    1.806562335947534,\n                    1.6970738382265615,\n                    1.712785611631412,\n                    1.64963418269868,\n                    1.9224145687585874,\n                    1.7583472867606116,\n                    1.375337698668244,\n                    1.6224943241381713,\n                    2.058167178754207,\n                    1.7978415165919843,\n                    1.707574341990535,\n                    1.7569797412022574,\n                    1.531734398140491,\n                    1.7903604999457476,\n                    1.9108965548878774,\n                    2.080845773789116,\n                    2.1391097360998885,\n                    1.7154527452137112,\n                    1.6032176403517215,\n                    1.6137719412202771,\n                    1.816400336891317,\n                    1.7377223739709597,\n                    1.8917085064761456,\n                    2.062825953345292,\n                    1.6430226449782908,\n                    1.5567504002595662,\n                    1.6633814721682585,\n                    1.5980537539320814,\n                    1.838676008813305,\n                    1.579178035537527,\n                    1.6002936498145275,\n                    1.6842901747427523,\n                    2.129952569810947,\n                    2.173095034607128,\n                    2.063299762750114,\n                    1.7003202721268993,\n                    1.7140459600441476,\n                    1.7257359026340269,\n                    1.616742701402562,\n                    1.6557910931304096,\n                    1.9860327083505778,\n                    1.6508807313745935,\n                    2.1867759559359814,\n                    1.7073023235688052,\n                    1.8808854636981032,\n                    2.2140084106928115,\n                    1.789747574159698,\n                    1.7882251165969443,\n                    2.062170220272938,\n                    1.9026312527306932,\n                    1.5603206256420317,\n                    1.8092188128531466,\n                    1.9772582312634244,\n                    2.078150637980858,\n                    1.5900386253892151,\n                    1.6127765667639815,\n                    2.0369736685641264,\n                    1.662395722470829,\n                    1.9991107754625916,\n                    2.1152038234801327,\n                    1.9507036165525933,\n                    2.0725879951594246,\n                    1.8686147304089071,\n                    1.7577778933792367,\n                    2.0639084583354608,\n                    1.4761569077104435,\n                    1.8212579417042898,\n                    1.7013704378793106,\n                    1.6972671614386141,\n                    2.108093608683468,\n                    1.8727443808616657,\n                    1.7036496616794898,\n                    1.9555612366246602,\n                    2.0359132061095466,\n                    2.0334154570527714,\n                    1.8121016911576493,\n                    1.9931476764498282,\n                    1.9830582134002195,\n                    2.1473347446443793\n                ],\n                high: 2.33,\n                low: 1.38,\n                mean: 1.84,\n                probFail: 1.0,\n                stdev: 0.2\n            },\n            '1.0': {\n                fs_vals: [\n                    2.1389715981341966,\n                    2.1712187332022577,\n                    2.312675039698255,\n                    2.017084402629208,\n                    1.8996171378947857,\n                    2.5241167662900965,\n                    1.6981410823243352,\n                    2.3419217699535144,\n                    1.9845502715828396,\n                    1.820856546947426,\n                    1.9827167715370906,\n                    2.1169269446131076,\n                    1.704968990310638,\n                    2.3494861197053227,\n                    1.9664359149675485,\n                    1.868182829131645,\n                    1.9000820455674563,\n                    1.8758169640324127,\n                    2.0230019696626638,\n                    1.9300648022688145,\n                    1.8160769471464049,\n                    1.9526105103401572,\n                    1.8358461171688962,\n                    1.8520293494628879,\n                    1.7851358390963055,\n                    2.0813750583855044,\n                    1.8979480203309582,\n                    1.4810442811367288,\n                    1.7533899775623174,\n                    2.2289936982423386,\n                    1.947498114956377,\n                    1.8444254521642787,\n                    1.8984097203439565,\n                    1.6534658115611793,\n                    1.9374835658278604,\n                    2.068887973306042,\n                    2.2572635870745876,\n                    2.31970888774365,\n                    1.8562196831298678,\n                    1.7357898166582673,\n                    1.7450204529372804,\n                    1.9711133089944166,\n                    1.8776390691601597,\n                    2.0489964404514467,\n                    2.2347693627919156,\n                    1.7764719554249566,\n                    1.6813426003759093,\n                    1.795780239363417,\n                    1.7228216306729158,\n                    1.9888071806324996,\n                    1.7035772263495281,\n                    1.7252495881892684,\n                    1.8171916900045848,\n                    2.3120658700662267,\n                    2.358230617825688,\n                    2.236743433251781,\n                    1.8385461897043958,\n                    1.8549142743479479,\n                    1.8663282517345492,\n                    1.7450891961329769,\n                    1.7901294395956024,\n                    2.152017020594993,\n                    1.7861198787724444,\n                    2.3733108890202,\n                    1.845324097480515,\n                    2.0360256521952556,\n                    2.4012794098399373,\n                    1.937302470129143,\n                    1.9347189607400797,\n                    2.23719230450434,\n                    2.0622379249444824,\n                    1.6868497678274514,\n                    1.9583477365935658,\n                    2.1434385100232336,\n                    2.2550122996620576,\n                    1.7149224591696837,\n                    1.7396016969899917,\n                    2.2061715148261563,\n                    1.798374233992693,\n                    2.1656396200274712,\n                    2.293511667484638,\n                    2.1134127887788416,\n                    2.24409172546813,\n                    2.024795322471923,\n                    1.9042431830952102,\n                    2.242117966733242,\n                    1.5941336784227158,\n                    1.9673197253087575,\n                    1.838391524484101,\n                    1.8378260960780595,\n                    2.289065402916589,\n                    2.025277384653284,\n                    1.8439815372012285,\n                    2.120337448225312,\n                    2.2040321055594436,\n                    2.2055853110495476,\n                    1.9581772169191327,\n                    2.16040865028624,\n                    2.152282949977063,\n                    2.328501542598258\n                ],\n                high: 2.52,\n                low: 1.48,\n                mean: 1.99,\n                probFail: 1.0,\n                stdev: 0.22\n            },\n            1.05: {\n                fs_vals: [\n                    2.327997128254304,\n                    2.3699269046094407,\n                    2.519828723222062,\n                    2.1969902471430007,\n                    2.069291714754446,\n                    2.7573328824839822,\n                    1.8436619609238645,\n                    2.5553391810885464,\n                    2.1608304794930047,\n                    1.981051024818409,\n                    2.1563057520974387,\n                    2.3091962436710998,\n                    1.8513811598523517,\n                    2.565930695276821,\n                    2.1357660313703986,\n                    2.0329952715248307,\n                    2.0611707053478145,\n                    2.043761619363301,\n                    2.2082470508718273,\n                    2.098142224522225,\n                    1.9709102511037766,\n                    2.1224133224676875,\n                    1.9977044620531466,\n                    2.0142348567921387,\n                    1.9433511744919023,\n                    2.267240029800846,\n                    2.0594378226389507,\n                    1.6022855368554636,\n                    1.9055313161875058,\n                    2.4290081801081933,\n                    2.1228639721787252,\n                    2.0032255102681136,\n                    2.0626968453158567,\n                    1.7943303369873251,\n                    2.1092698010591695,\n                    2.253715795273167,\n                    2.4649379735863803,\n                    2.5320852641213616,\n                    2.0205995385295847,\n                    1.8908334476486421,\n                    1.8978992523340341,\n                    2.1534517872230463,\n                    2.040127301171186,\n                    2.2332785115393543,\n                    2.436277918874521,\n                    1.9318039375036655,\n                    1.8257969913512935,\n                    1.9491421789634982,\n                    1.866605332338952,\n                    2.1638643244794076,\n                    1.8472415857589877,\n                    1.8691747488281725,\n                    1.9707519991062055,\n                    2.5269317795131085,\n                    2.576477678209827,\n                    2.440508757032552,\n                    1.9995351929976684,\n                    2.019375990818,\n                    2.0301468617570815,\n                    1.8936012297823352,\n                    1.9465486581664644,\n                    2.3467486420035413,\n                    1.9439413629267661,\n                    2.5932683628019957,\n                    2.0058458200670657,\n                    2.217399283206293,\n                    2.621649654820536,\n                    2.109791297519793,\n                    2.105707471948006,\n                    2.4433426415757955,\n                    2.249597484638465,\n                    1.8341248267499208,\n                    2.1326451339864336,\n                    2.3386511070514935,\n                    2.4634111060587607,\n                    1.8589350451608233,\n                    1.8859764948115103,\n                    2.4043429905899294,\n                    1.9569996195091321,\n                    2.360771012308253,\n                    2.503084135124029,\n                    2.3041997055843155,\n                    2.4448118477399574,\n                    2.2080046613253375,\n                    2.07593575659161,\n                    2.4528734805475954,\n                    1.7308718879076277,\n                    2.136832451293125,\n                    1.9975738883353031,\n                    2.0023110403523727,\n                    2.5027825124284315,\n                    2.202936635125917,\n                    2.0080226504077845,\n                    2.3140349303145564,\n                    2.4005578788964734,\n                    2.408187344978148,\n                    2.127898688610988,\n                    2.356804190902001,\n                    2.3518231882352976,\n                    2.5415713378565656\n                ],\n                high: 2.76,\n                low: 1.6,\n                mean: 2.16,\n                probFail: 1.0,\n                stdev: 0.24\n            },\n            1.1: {\n                fs_vals: [\n                    2.5542641912634734,\n                    2.60946996872397,\n                    2.768423712451266,\n                    2.4127847123317188,\n                    2.272866236915687,\n                    3.039109749863408,\n                    2.0166764208620993,\n                    2.812462782948795,\n                    2.372036370712327,\n                    2.1726220652460846,\n                    2.3636660347545004,\n                    2.5406634323847865,\n                    2.02554510404863,\n                    2.8272680706484654,\n                    2.3373174934432335,\n                    2.230197439888491,\n                    2.2522458290948277,\n                    2.245302236278851,\n                    2.4316157545348487,\n                    2.298650635043903,\n                    2.154724667449667,\n                    2.3248967971411036,\n                    2.1913203222503514,\n                    2.208023157074649,\n                    2.1328124990490482,\n                    2.490119546769891,\n                    2.251045675970957,\n                    1.7448998083299274,\n                    2.0868985612342024,\n                    2.669172558621879,\n                    2.3335936914910267,\n                    2.1922178317844483,\n                    2.2584269043867478,\n                    1.961520262887584,\n                    2.3149850975258874,\n                    2.475456970634112,\n                    2.715605609913009,\n                    2.7881712471080364,\n                    2.21745714946324,\n                    2.076790702941903,\n                    2.0805322957931813,\n                    2.3737882696590433,\n                    2.2336697448508502,\n                    2.4546893663302813,\n                    2.678457283310299,\n                    2.11724183070854,\n                    1.9975788651952064,\n                    2.1313397660833213,\n                    2.0365450277803836,\n                    2.3732086141623014,\n                    2.0174091308258486,\n                    2.039199431553843,\n                    2.152731952236798,\n                    2.786844766296706,\n                    2.8402648169519487,\n                    2.685979708932794,\n                    2.1918365754105316,\n                    2.2162968694628904,\n                    2.2259164080501677,\n                    2.069856485972337,\n                    2.1333379493886837,\n                    2.5810195062320673,\n                    2.132826456687632,\n                    2.8591943486573865,\n                    2.1973177619678257,\n                    2.434857748305152,\n                    2.887543743071652,\n                    2.3165771540920876,\n                    2.310387123904747,\n                    2.6923037225812623,\n                    2.475133834889484,\n                    2.0099371460904134,\n                    2.3415640859574,\n                    2.5737968735201706,\n                    2.7151883703049213,\n                    2.029270518321786,\n                    2.0592478739159565,\n                    2.642367326511511,\n                    2.146777235581092,\n                    2.595249136057526,\n                    2.755663468586794,\n                    2.5336057091679045,\n                    2.6857147075871852,\n                    2.428391697641052,\n                    2.282327065033031,\n                    2.7083921580722237,\n                    1.8934228403713615,\n                    2.338604077769127,\n                    2.187242260096255,\n                    2.1997076106797784,\n                    2.7615375522488304,\n                    2.415165058082326,\n                    2.2046729360225616,\n                    2.547511737187464,\n                    2.636164015501099,\n                    2.652649207102334,\n                    2.3301502989631517,\n                    2.5932746112419407,\n                    2.593060762767845,\n                    2.798517901631267\n                ],\n                high: 3.04,\n                low: 1.74,\n                mean: 2.38,\n                probFail: 1.0,\n                stdev: 0.27\n            },\n            1.15: {\n                fs_vals: [\n                    2.8337441141251616,\n                    2.907366014440734,\n                    3.0762404352689643,\n                    2.67985628185874,\n                    2.5248777757354763,\n                    3.3902713250285688,\n                    2.228976826293891,\n                    3.132035524168195,\n                    2.6331499261659124,\n                    2.4090258501291726,\n                    2.619282162739392,\n                    2.8281400139537474,\n                    2.2393628147742453,\n                    3.1527514273403945,\n                    2.58490877850363,\n                    2.473680980729033,\n                    2.486167710131682,\n                    2.494851645642002,\n                    2.709460422795124,\n                    2.5455035010469,\n                    2.379957135368119,\n                    2.5740835747413593,\n                    2.4303169468217147,\n                    2.4469388209283482,\n                    2.3669244248699783,\n                    2.7658967327792867,\n                    2.485698514548825,\n                    1.9180584728140988,\n                    2.3100288802267785,\n                    2.9667089276632037,\n                    2.5948555877138313,\n                    2.424353025074079,\n                    2.499088367093012,\n                    2.166334049814516,\n                    2.569186421855426,\n                    2.7499434273997494,\n                    3.027706331668642,\n                    3.106714068788812,\n                    2.460720324342774,\n                    2.3069245733363393,\n                    2.3056827415862453,\n                    2.6484194349356986,\n                    2.471592360905859,\n                    2.729151873004912,\n                    2.9787551848282066,\n                    2.34570421296778,\n                    2.2084157499201593,\n                    2.354741061538877,\n                    2.2438583786113493,\n                    2.6315470661195843,\n                    2.225450550794784,\n                    2.246524536720776,\n                    2.3753237251752504,\n                    3.1111216756016806,\n                    3.16911968642538,\n                    2.9910421127767393,\n                    2.4288817359432437,\n                    2.4596051022089394,\n                    2.467343645602161,\n                    2.2857591388472263,\n                    2.3635207494716255,\n                    2.8717853628755865,\n                    2.366099783907507,\n                    3.1908008219005244,\n                    2.433015734345251,\n                    2.7038784497600075,\n                    3.218482874989783,\n                    2.5723703286666963,\n                    2.5632066478899613,\n                    3.002431197089572,\n                    2.7552238162459814,\n                    2.226527378679786,\n                    2.5999559840154225,\n                    2.8660024376329063,\n                    3.0289484641195576,\n                    2.2372297605166986,\n                    2.2709572930438777,\n                    2.937336999523972,\n                    2.3810695518490563,\n                    2.8859537935554527,\n                    3.0696978801597474,\n                    2.818192688711707,\n                    2.9840303209338743,\n                    2.701901617901859,\n                    2.5382980010741805,\n                    3.0278694405444218,\n                    2.092863722967056,\n                    2.586472208643923,\n                    2.4204749385260236,\n                    2.444132936808397,\n                    3.084644366984592,\n                    2.676797320827116,\n                    2.44791556451264,\n                    2.837827444281874,\n                    2.927618844921474,\n                    2.9569251291536163,\n                    2.5788890476313187,\n                    2.8870083760941183,\n                    2.893878272274534,\n                    3.118154408497183\n                ],\n                high: 3.39,\n                low: 1.92,\n                mean: 2.64,\n                probFail: 1.0,\n                stdev: 0.31\n            },\n            1.2: {\n                fs_vals: [\n                    3.1930528600062957,\n                    3.2928080718960486,\n                    3.472908565434961,\n                    3.0238502057920296,\n                    2.8495524139298127,\n                    3.84552102581777,\n                    2.50021454397047,\n                    3.5452925719804536,\n                    2.969137741662507,\n                    2.7126868556905235,\n                    2.947292072651931,\n                    3.1996420481766075,\n                    2.512668582070972,\n                    3.574466084062894,\n                    2.9015680322710233,\n                    2.786595892768061,\n                    2.7843675901241527,\n                    2.8164278736372896,\n                    3.0690317570029615,\n                    2.861886403014879,\n                    2.667332048589767,\n                    2.893340853062658,\n                    2.737396583423927,\n                    2.753553614936175,\n                    2.6680247748821913,\n                    3.121039303021875,\n                    2.7849369511912574,\n                    2.1370441896921393,\n                    2.595814551688434,\n                    3.350317129149427,\n                    2.9319271284339297,\n                    2.7212124910027726,\n                    2.8071587274793486,\n                    2.42759881611027,\n                    2.8961317380967606,\n                    3.1035586337202923,\n                    3.431969808909587,\n                    3.518955602487784,\n                    2.773599650323195,\n                    2.6033368172336067,\n                    2.5946196332239597,\n                    3.0045035644930516,\n                    2.7761012016745776,\n                    3.08320135117881,\n                    3.3662472175117424,\n                    2.6387184417555,\n                    2.4778499446873528,\n                    2.6399567728492275,\n                    2.5072391565863907,\n                    2.9633881711719274,\n                    2.4903138574630836,\n                    2.509814520561547,\n                    2.6588443892383697,\n                    3.531954406375856,\n                    3.5955855828342647,\n                    3.3855025916118873,\n                    2.7330533197629934,\n                    2.7725106299683113,\n                    2.7772698641137876,\n                    2.5611460134700743,\n                    2.658800574805544,\n                    3.247303014141745,\n                    2.665966121324593,\n                    3.620938154499282,\n                    2.735063108511809,\n                    3.050253888536945,\n                    3.6469994484150465,\n                    2.9016850037967243,\n                    2.888244622290344,\n                    3.4043154988226845,\n                    3.1171586535909013,\n                    2.504293908470555,\n                    2.932569839331023,\n                    3.2438090666304253,\n                    3.435695395445749,\n                    2.5016433726751814,\n                    2.540336988852617,\n                    3.3177362177305985,\n                    2.682144430319665,\n                    3.2610141425103536,\n                    3.475930580771653,\n                    3.1855609270410055,\n                    3.3684728421760237,\n                    3.0551067357556354,\n                    2.868647424338807,\n                    3.4432949261268084,\n                    2.347653156131349,\n                    2.90349627456858,\n                    2.719065847243542,\n                    2.7591125821528775,\n                    3.5042897311829098,\n                    3.0125536642241992,\n                    2.761053605818702,\n                    3.213411777986242,\n                    3.3028653023040633,\n                    3.3509354407895455,\n                    2.897372869194485,\n                    3.26664961902193,\n                    3.2840770393551693,\n                    3.531833650508746\n                ],\n                high: 3.85,\n                low: 2.14,\n                mean: 2.97,\n                probFail: 1.0,\n                stdev: 0.36\n            },\n            1.25: {\n                fs_vals: [\n                    3.680096434075491,\n                    3.8183397783114206,\n                    4.011757123194465,\n                    3.4909258998164407,\n                    3.290494896114377,\n                    4.467321980926751,\n                    2.865759626951415,\n                    4.108454304914572,\n                    3.4249364098453303,\n                    3.123966809044291,\n                    3.391141248517435,\n                    3.7055954438167356,\n                    2.881161941483596,\n                    4.15016240347577,\n                    3.3287434709863,\n                    3.2106095787783553,\n                    3.1854193348194304,\n                    3.253260042518922,\n                    3.5593778667065563,\n                    3.2895299521100885,\n                    3.0541495290436877,\n                    3.3247257671882333,\n                    3.1534202054698683,\n                    3.1684943738992772,\n                    3.076318493577666,\n                    3.6031849115520944,\n                    3.187529808380455,\n                    2.4293629109933454,\n                    2.9818588003635282,\n                    3.8716533281457894,\n                    3.3903047948360587,\n                    3.12163996842842,\n                    3.2230943208829514,\n                    2.7791997391291243,\n                    3.3394817619620176,\n                    3.5837898946122055,\n                    3.9837061319629803,\n                    4.081127792922778,\n                    3.1978719229466592,\n                    3.005807384093482,\n                    2.9856244809120858,\n                    3.4909227834038044,\n                    3.1871633052136144,\n                    3.5645987341176575,\n                    3.8932655194751424,\n                    3.035030161833542,\n                    2.841054027071844,\n                    3.024083625965112,\n                    2.860334024164944,\n                    3.412844146000987,\n                    2.846102475734134,\n                    2.8626617820847926,\n                    3.039861610713542,\n                    4.107285668184628,\n                    4.178237803989638,\n                    3.923010120956124,\n                    3.1446371969925675,\n                    3.19678760001152,\n                    3.1968061772511684,\n                    2.931720024128316,\n                    3.0582417230976144,\n                    3.7584320853210835,\n                    3.072391246595021,\n                    4.208734239604299,\n                    3.143279117691601,\n                    3.5204075253843645,\n                    4.231649010476615,\n                    3.3486438716738163,\n                    3.3288400162083893,\n                    3.9530172676085362,\n                    3.6100590673069126,\n                    2.8799512521651054,\n                    3.3839506536255857,\n                    3.758588041685683,\n                    3.991233178175159,\n                    2.8564021782059195,\n                    2.902001565254713,\n                    3.834833444293455,\n                    3.0900812187215827,\n                    3.771058842045223,\n                    4.029695565810792,\n                    3.68538821910343,\n                    3.890725414814161,\n                    3.5358343326622084,\n                    3.318010788486881,\n                    4.012247185760405,\n                    2.691013330529927,\n                    3.331180172791447,\n                    3.122240930136574,\n                    3.1869896643866467,\n                    4.0784069767782425,\n                    3.466926284358025,\n                    3.186030540453833,\n                    3.7254354735422113,\n                    3.8121963604274147,\n                    3.8885334081520067,\n                    3.3274624009762594,\n                    3.783754567313126,\n                    3.8172965208040375,\n                    4.095988342128363\n                ],\n                high: 4.47,\n                low: 2.43,\n                mean: 3.43,\n                probFail: 1.0,\n                stdev: 0.43\n            },\n            1.3: {\n                fs_vals: [\n                    4.390684209208523,\n                    4.589044452643019,\n                    4.799439613612721,\n                    4.173400270470002,\n                    3.934912593314619,\n                    5.380597478385936,\n                    3.3963498561747016,\n                    4.933958618625004,\n                    4.090415828950028,\n                    3.72358691571673,\n                    4.037717928645694,\n                    4.446849038819745,\n                    3.416239873683747,\n                    4.995337906836168,\n                    3.9493291938864217,\n                    3.8290543126064183,\n                    3.76646842744939,\n                    3.8918030093154963,\n                    4.278591774834898,\n                    3.911891930187087,\n                    3.6150059746072496,\n                    3.9523487035011375,\n                    3.760106688209305,\n                    3.7730125112866055,\n                    3.672212300573706,\n                    4.307604441451358,\n                    3.771010326532316,\n                    2.8500237486027653,\n                    3.543365231422144,\n                    4.634026294079758,\n                    4.060978594134596,\n                    3.703320222162363,\n                    3.827804698106708,\n                    3.2889034477830235,\n                    3.986554228526142,\n                    4.285608928015585,\n                    4.793532140074763,\n                    4.905691085109366,\n                    3.8170885568119752,\n                    3.5938928761263225,\n                    3.555257567493449,\n                    4.2054385446574685,\n                    3.784708806719397,\n                    4.268863309559527,\n                    4.664470345599837,\n                    3.6121269688298896,\n                    3.368369509227019,\n                    3.5813126148794456,\n                    3.370434300325052,\n                    4.068136395293583,\n                    3.361020302818524,\n                    3.372247476860659,\n                    3.5915077188313544,\n                    4.952998217694445,\n                    5.034224376864579,\n                    4.710859748087506,\n                    3.7442022526541776,\n                    3.815980422396343,\n                    3.8081716007398287,\n                    3.468883620399458,\n                    3.6399708597404636,\n                    4.506889280724227,\n                    3.6653039150609112,\n                    5.072442139636546,\n                    3.7372994455919852,\n                    4.207183272532128,\n                    5.08953995963611,\n                    4.00148951809679,\n                    3.9716683778346695,\n                    4.758655737881218,\n                    4.332162938506803,\n                    3.4269259141963846,\n                    4.043185203737331,\n                    4.513078944470903,\n                    4.807166621235741,\n                    3.3692833922062486,\n                    3.4251768088351753,\n                    4.5911625359864,\n                    3.685035836424291,\n                    4.517341297414009,\n                    4.841656958334452,\n                    4.417027501730077,\n                    4.654152107473308,\n                    4.239736111558957,\n                    3.9756565589983084,\n                    4.84988066929422,\n                    3.189385237179463,\n                    3.952528682641201,\n                    3.7084489804582654,\n                    3.812447523185417,\n                    4.922859920251299,\n                    4.128895185117099,\n                    3.8067313770515177,\n                    4.476237266962803,\n                    4.556193504429038,\n                    4.677422200351808,\n                    3.952875249804937,\n                    4.541432458885722,\n                    4.600812701817559,\n                    4.9234817035263045\n                ],\n                high: 5.38,\n                low: 2.85,\n                mean: 4.1,\n                probFail: 1.0,\n                stdev: 0.53\n            },\n            1.35: {\n                fs_vals: [\n                    5.548368688767031,\n                    5.85011218078636,\n                    6.084809272660341,\n                    5.286677502953671,\n                    4.986287215079179,\n                    6.876832103688108,\n                    4.257037675048015,\n                    6.284157637386514,\n                    5.1752689448859766,\n                    4.69989435679322,\n                    5.089758520034905,\n                    5.658713656758545,\n                    4.284493216191757,\n                    6.379483429096334,\n                    4.956742407691522,\n                    4.836369451584908,\n                    4.707518734698907,\n                    4.933781127957832,\n                    5.455553777822199,\n                    4.923703516505934,\n                    4.5239555199122075,\n                    4.97246305944625,\n                    4.74813015984515,\n                    4.756692359342144,\n                    4.643318490482024,\n                    5.456591742678825,\n                    4.716284615510421,\n                    3.527378386555181,\n                    4.4558059478514735,\n                    5.878486046492426,\n                    5.156255423426507,\n                    4.647514903264801,\n                    4.8100755456791955,\n                    4.114828044329695,\n                    5.041086532693718,\n                    5.430613395930516,\n                    6.119550232125744,\n                    6.255049524368752,\n                    4.8262006337585825,\n                    4.5532217962856745,\n                    4.482156688358477,\n                    5.3761579315135295,\n                    4.755237101250154,\n                    5.418870750824077,\n                    5.924064612994299,\n                    4.5508092491420165,\n                    4.22392265016608,\n                    4.484753547279111,\n                    4.1945510572992575,\n                    5.13511169839475,\n                    4.194206686584417,\n                    4.195323762315684,\n                    4.48442169719721,\n                    6.33948238389135,\n                    6.436888047060352,\n                    5.999403554505757,\n                    4.719739568150057,\n                    4.825021804319175,\n                    4.803207104524381,\n                    4.339238936486091,\n                    4.5862815945491615,\n                    5.730010955560052,\n                    4.631201615353037,\n                    6.487982838362536,\n                    4.702937796640569,\n                    5.327213774474125,\n                    6.493922446825839,\n                    5.066118388003891,\n                    5.018970205726227,\n                    6.078173719898189,\n                    5.5126881489407475,\n                    4.3165437755218745,\n                    5.118139215249768,\n                    5.7470043326600555,\n                    6.143903522965277,\n                    4.198428984914486,\n                    4.271385937848839,\n                    5.82596595416732,\n                    4.654035853933748,\n                    5.736115226408676,\n                    6.1700268704969075,\n                    5.612299548838756,\n                    5.899933513044668,\n                    5.389996377939227,\n                    5.049875290947176,\n                    6.224886259938799,\n                    3.9977942046818056,\n                    4.961216496031456,\n                    4.660733934062473,\n                    4.833077556439728,\n                    6.30799447047398,\n                    5.206075580287181,\n                    4.818885827862108,\n                    5.7046046881130765,\n                    5.769541995693381,\n                    5.968905619151783,\n                    4.968948596520785,\n                    5.780268110407242,\n                    5.884933113238202,\n                    6.277659012058958\n                ],\n                high: 6.88,\n                low: 3.53,\n                mean: 5.19,\n                probFail: 1.0,\n                stdev: 0.71\n            },\n            1.4: {\n                fs_vals: [\n                    7.823804291961488,\n                    8.337107946960963,\n                    8.614419800857146,\n                    7.476967987573022,\n                    7.055061435313227,\n                    9.830476027259277,\n                    5.9429776923755755,\n                    8.946104298363194,\n                    7.3085704726679905,\n                    6.617928048273227,\n                    7.155468996590781,\n                    8.047118090985977,\n                    5.9856920825867865,\n                    9.111067488991967,\n                    6.931232066468055,\n                    6.8158700481784535,\n                    6.5485793130730325,\n                    6.9843630809211605,\n                    7.776900670793311,\n                    6.909153935608525,\n                    6.303155625305422,\n                    6.973824027889279,\n                    6.689509170093748,\n                    6.688284294360707,\n                    6.5524699118493945,\n                    7.717022373546175,\n                    6.566065207318376,\n                    4.846478486673719,\n                    6.245593779743883,\n                    8.328178172296255,\n                    7.3130522950031995,\n                    6.498005733748836,\n                    6.736260104267127,\n                    5.731322967335988,\n                    7.114286060135738,\n                    7.683592775771318,\n                    8.736063371037181,\n                    8.91641090420865,\n                    6.810058869408962,\n                    6.440675342736213,\n                    6.302231880191022,\n                    7.687398663314622,\n                    6.658241250366022,\n                    7.683244999630104,\n                    8.404651836036127,\n                    6.393473321201665,\n                    5.900087481612779,\n                    6.253732976082132,\n                    5.803715268534994,\n                    7.231306697460454,\n                    5.823076082410359,\n                    5.8021425137003675,\n                    6.230516878596714,\n                    9.0779059329795,\n                    9.206253993392709,\n                    8.539694254032657,\n                    6.635218903514282,\n                    6.808704683263488,\n                    6.75743157794015,\n                    6.042588135257822,\n                    6.444052569154954,\n                    8.139803157857266,\n                    6.52957336309609,\n                    9.283116004017085,\n                    6.597631927331229,\n                    7.53039327857415,\n                    9.26454372244254,\n                    7.160216406969302,\n                    7.077464193489102,\n                    8.682397300698574,\n                    7.839283719119293,\n                    6.06277942348453,\n                    7.232405815416877,\n                    8.179528200301105,\n                    8.78266321462317,\n                    5.818258913016104,\n                    5.925194335486308,\n                    8.256967344462547,\n                    6.558160578939363,\n                    8.136136685215071,\n                    8.789436609715725,\n                    7.966663506478947,\n                    8.351608893573102,\n                    7.656164529046135,\n                    7.165535716978695,\n                    8.943333276340214,\n                    5.581311832150715,\n                    6.93826406483817,\n                    6.528223788579039,\n                    6.84165034267308,\n                    9.044844831655405,\n                    7.321307267711573,\n                    6.809680795789024,\n                    8.126896997331626,\n                    8.15629168710997,\n                    8.516890784596965,\n                    6.961689348671789,\n                    8.222011945724823,\n                    8.420576679241924,\n                    8.94855356695221\n                ],\n                high: 9.83,\n                low: 4.85,\n                mean: 7.33,\n                probFail: 1.0,\n                stdev: 1.07\n            },\n            1.45: {\n                fs_vals: [\n                    14.57025842133042,\n                    15.727848161344543,\n                    16.121030034548824,\n                    13.975320452168406,\n                    13.193444916026198,\n                    18.613774576721994,\n                    10.929938822232844,\n                    16.855058009231065,\n                    13.635687520930922,\n                    12.302878586497645,\n                    13.275874261671248,\n                    15.141700584199189,\n                    11.018683434507423,\n                    17.232426451989358,\n                    12.774038941124193,\n                    12.68412674067772,\n                    11.989691647828058,\n                    13.069385313139568,\n                    14.675809943578095,\n                    12.789182546334834,\n                    11.56338574854651,\n                    12.900199634999035,\n                    12.444330465529587,\n                    12.41153623577087,\n                    12.213824433100324,\n                    14.423264386558163,\n                    12.033905460386313,\n                    8.732577121713012,\n                    11.544787485670565,\n                    15.598823587930655,\n                    13.715948520097903,\n                    11.973696378846698,\n                    12.438118656039407,\n                    10.510127625823579,\n                    13.262182088756358,\n                    14.368489037747091,\n                    16.514579698924585,\n                    16.825807364435164,\n                    12.69291301529232,\n                    12.040652611553684,\n                    11.695028134174716,\n                    14.560743782827766,\n                    12.291178388748884,\n                    14.405101048773895,\n                    15.769241226175556,\n                    11.852093026618952,\n                    10.858726585795045,\n                    11.484879315061969,\n                    10.553078471076857,\n                    13.444398881283597,\n                    10.63469522277004,\n                    10.543955875614506,\n                    11.389354359845257,\n                    17.22410273030312,\n                    17.442443431134855,\n                    16.086989958950785,\n                    12.310483664727261,\n                    12.690985375995137,\n                    12.5484331671684,\n                    11.077935379808437,\n                    11.947673722409013,\n                    15.296291520806502,\n                    12.157858869846347,\n                    17.59663492483109,\n                    12.208565451675485,\n                    14.066187304483053,\n                    17.500135143805913,\n                    13.372207928969603,\n                    13.180739553338736,\n                    16.42545339472546,\n                    14.75018737664824,\n                    11.235501086612736,\n                    13.503944286983652,\n                    15.406464790871869,\n                    16.629535958771136,\n                    10.600863316494802,\n                    10.80942223215043,\n                    15.472779152497766,\n                    12.202801268086306,\n                    15.261177816432165,\n                    16.573034690372356,\n                    14.957410233312267,\n                    15.626870797214123,\n                    14.385982080930644,\n                    13.446976994550425,\n                    17.03556312052676,\n                    10.265289133218413,\n                    12.788768078527598,\n                    12.056552608602585,\n                    12.802013116511304,\n                    17.18857653591464,\n                    13.588779810860872,\n                    12.71504744220977,\n                    15.324905347533207,\n                    15.236682282028447,\n                    16.09090652538711,\n                    12.8611247482576,\n                    15.475409775207345,\n                    15.962332270281598,\n                    16.886328058261554\n                ],\n                high: 18.61,\n                low: 8.73,\n                mean: 13.69,\n                probFail: 1.0,\n                stdev: 2.13\n            }\n        }\n    }\n}\n\nexport { data, results, testing }\n","import axios from 'axios'\n\nconst BASE_URL = 'http://127.0.0.1:5000'\n\nexport default axios.create({\n    baseURL: BASE_URL,\n    timeout: 20000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\n","const LABELS = {\n    c: 'C: Soil Cohesion (kPa)',\n    c_r: 'C_r: Root cohesion (kPa)',\n    phi: 'phi: Effective Angle of Friction (deg)',\n    k_s: 'k_s: Saturated Hydraulic Conductivity (m/s)',\n    a: \"Van Genuchten's parameter a (1/kPa)\",\n    n: \"Van Genuchten's parameter n\",\n    gamma: 'gamma: Soil Weight (kN/m3)',\n    gamma_w: \"gamma_w: Unit Weight of Water (kN/m3)\",\n    slope: \"Beta: Slope (deg)\",\n    q: \"q: Infiltration (m/s)\",\n    H_wt: \"H_wt: Distance from surface to water table (m)\",\n    z_step: \"Z Step: Used to calculate values to analysis values\" +\n        \"between 0 and H_wt (m)\"\n}\n\nexport default LABELS;","/* eslint-disable react/prop-types */\n/* eslint-disable react/no-unescaped-entities */\nimport React, { Component, Fragment } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport * as Vars from './variables'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\n// import { testing } from '../resources/test_data';\nimport { data } from '../resources/test_data'\nimport AppMode from '../AppMode'\nimport API from './apiClient'\nimport LABELS from '../resources/labels'\n\n//  Random Variables:\n//    c, c_r, phi, k_s, a, n\n// Constant Variables:\n//    gamma, gamma_w, slope, z_step, H_wt\n// also, ask user for fluxes\n\nclass DataFormPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: data\n            // data: testing.data,\n        }\n    }\n\n    static propTypes = {\n        onSubmit: PropTypes.func,\n        apiClient: PropTypes.object,\n        changeMode: PropTypes.func\n    };\n\n    componentDidMount() {\n        if (this.state.data.conf === undefined) {\n            const newData = this.state.data\n            this.setState({ data: newData })\n        }\n    }\n\n    //  handling variable changes in data form when configuration\n    handleNondetChange = (varName, key, value) => {\n        // console.log(varName, key, value);\n        var newData = this.state.data\n        // console.log('old data:\\t', newData);\n        newData.randVars[varName][key] = value\n        // console.log('var:\\t', varName);\n        // console.log('\\tnew data:\\t', newData);\n        this.setState({ newData })\n    };\n\n    handleDetChange = (varName, val) => {\n        // console.log('handling Deterministic Change');\n        var newData = this.state.data\n        newData.randVars[varName].detVal = val\n        this.setState({ newData })\n    };\n\n    handleDistChange = (varName, selected) => {\n        var newData = this.state.data\n        newData.randVars[varName] = {\n            dist: selected,\n            low: 0,\n            high: 0,\n            mean: 0,\n            stdev: 0\n        }\n        this.setState(newData)\n        // console.log(varName, 'new dist is: ', selected);\n    };\n\n    handleConstVarChange = (varName, value) => {\n        var newData = this.state.data\n        newData.constVars[varName] = value\n        this.setState(newData)\n    };\n\n    handleNumVarChange = number => {\n        var newData = this.state.data\n        newData.numVars = number\n        this.setState(newData)\n    };\n\n    handleZVarChange = (key, val) => {\n        var newData = this.state.data\n        newData.z[key] = val\n        this.setState(newData)\n    };\n\n    handleSatChange = val => {\n        var newData = this.state.data\n        newData.sat = val\n        this.setState(newData)\n    };\n\n    handleAnalysisChange = val => {\n        var newData = this.state.data\n        newData.conf = val\n        this.setState(newData)\n    };\n\n    handleFluxChange = (key, val) => {\n        var newData = this.state.data\n        newData.constVars.flux[key] = val\n\n        this.setState(newData)\n    };\n\n    handleFluxAdd = () => {\n        var newData = this.state.data\n        newData.constVars.flux.append(0)\n        this.setState(newData)\n    };\n\n    handleFluxRemove = index => {\n        var newData = this.state.data\n        if (index > -1) {\n            newData.constVars.flux.splice(index, 1)\n        }\n        this.setState(newData)\n    };\n\n    onSubmit = e => {\n        console.log(\n            \"submit has been clicked. attempting to post to '/api/add_data'\"\n        )\n        console.log('data being sent: ', this.state.data)\n        e.preventDefault()\n        API.post('/api/add_data', this.state.data).then(res => {\n            console.log(res)\n            this.props.changeMode(AppMode.DISPLAY)\n        })\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Header title=\"Data Form\" />\n                <div className=\"paddedPage\">\n                    <div className=\"myForm\">\n                        <Form>\n                            <Form.Row>\n                                <Vars.Saturation\n                                    handleChange={this.handleSatChange}\n                                />\n                                <Vars.Analysis\n                                    handleChange={this.handleAnalysisChange}\n                                />\n                                <Vars.NumRandVars\n                                    handleChange={this.handleNumVarChange}\n                                />\n                            </Form.Row>\n                            <Form.Row>\n                                <DataFormSelector\n                                    data={this.state.data}\n                                    handleNondetChange={this.handleNondetChange}\n                                    handleDetChange={this.handleDetChange}\n                                    handleDistChange={this.handleDistChange}\n                                    handleConstVarChange={\n                                        this.handleConstVarChange\n                                    }\n                                    handleZVarChange={this.handleZVarChange}\n                                />\n                            </Form.Row>\n\n                            <Button variant=\"primary\" onClick={this.onSubmit}>\n                                {' '}\n                                Submit{' '}\n                            </Button>\n                        </Form>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nclass DataFormSelector extends Component {\n    static propTypes = {\n        handleNondetChange: PropTypes.func,\n        handleDetChange: PropTypes.func,\n        handleDistChange: PropTypes.func,\n        handleConstVarChange: PropTypes.func,\n        handleZVarChange: PropTypes.func,\n        handleFluxChange: PropTypes.func,\n        handleFluxRemove: PropTypes.func\n    };\n\n    render() {\n        const sat = this.props.data.sat\n        const conf = this.props.data.conf\n        console.log('sat=', sat)\n        console.log('conf=', conf)\n        if (sat === false) {\n            return (\n                <Fragment>\n                    <div className=\"rand-vars\">\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c}\n                            conf={conf}\n                            name=\"c\"\n                            label={LABELS.c}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c_r}\n                            conf={conf}\n                            name=\"c_r\"\n                            label={LABELS.c_r}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.phi}\n                            conf={conf}\n                            name=\"phi\"\n                            label={LABELS.phi}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.k_s}\n                            conf={conf}\n                            name=\"k_s\"\n                            label={LABELS.k_s}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.a}\n                            conf={conf}\n                            name=\"a\"\n                            label={LABELS.a}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n                        <Vars.RandVar\n                            data={this.props.data.randVars.n}\n                            conf={conf}\n                            name=\"n\"\n                            label={LABELS.n}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n                    </div>\n\n                    <div className=\"const-vars\">\n                        <Vars.ConstVar\n                            name=\"gamma\"\n                            label={LABELS.gamma}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"gamma_w\"\n                            label={LABELS.gamma_w}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"slope\"\n                            label={LABELS.slope}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"q\"\n                            label={LABELS.q}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        {/* <Vars.FluxVar\n                            name=\"flux\"\n                            label={LABELS.q}\n                            handleRemove={this.handleFluxRemove}\n                            handleChange={this.handleFluxChange}\n                            handleAdd={this.handleAdd}\n                        /> */}\n                        <Vars.ConstVar\n                            name=\"H_wt\"\n                            label={LABELS.H_wt}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"z_step\"\n                            label={LABELS.z_step}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        {/* <ZVar handleChange={this.props.handleZVarChange} /> */}\n                    </div>\n                </Fragment>\n            )\n        } else if (sat === true) {\n            return (\n                <Fragment>\n                    <div className=\"rand-vars\">\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c}\n                            conf={conf}\n                            name=\"c\"\n                            label={LABELS.c}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.c_r}\n                            conf={conf}\n                            name=\"c_r\"\n                            label={LABELS.c_r}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n\n                        <Vars.RandVar\n                            data={this.props.data.randVars.phi}\n                            conf={conf}\n                            name=\"phi\"\n                            label={LABELS.phi}\n                            handleNondetChange={this.props.handleNondetChange}\n                            handleDetChange={this.props.handleDetChange}\n                            handleDistChange={this.props.handleDistChange}\n                        />\n                    </div>\n\n                    <div className=\"const-vars\">\n                        <Vars.ConstVar\n                            name=\"gamma\"\n                            label={LABELS.gamma}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"gamma_w\"\n                            label={LABELS.gamma_w}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"slope\"\n                            label={LABELS.slope}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"H_wt\"\n                            label={LABELS.H_wt}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        <Vars.ConstVar\n                            name=\"z_step\"\n                            label={LABELS.z_step}\n                            handleChange={this.props.handleConstVarChange}\n                        />\n                        {/* <ZVar handleChange={this.props.handleZVarChange} /> */}\n                    </div>\n                </Fragment>\n            )\n        } else {\n            return <h3>Error: invalid configuration</h3>\n        }\n    }\n}\n\nexport default DataFormPage\n","const UNITS = {\n    c: 'kPa',\n    c_r: 'kPa',\n    phi: 'deg',\n    k_s: 'm/s',\n    a: \"1/kPa\",\n    n: \"\",\n    gamma: 'kN/m3',\n    gamma_w: 'kN/m3',\n    slope: 'deg',\n    q: 'm/s',\n    H_wt: 'm',\n    z_step: 'm',\n};\n\nexport default UNITS\n","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\nimport Select from 'react-select'\nimport UNITS from '../../resources/units'\n\n// NON-DET data looks like:\n/*\nrandVars: {\n    \"a\": {\n        \"high\": _,\n        \"low\": _,\n        \"mean\": _,\n        \"stdev\": _,\n        \"vals\": [...]\n    },\n    \"c\": {...},\n    \"c_r\": {...},\n    ...\n}\n*/\n// DET data looks like\n/*\n    {\n        conf: 'det',\n        sat: False,\n        randVars: {\n            \"a\" 1,\n            ...\n        }\n    }\n\n*/\n\nclass RVDistGraph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected: ''\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string\n    };\n\n    setOptions = () => {\n        const options = []\n        for (const key in this.props.data) {\n            options.push({ value: key, label: key })\n        }\n        return options\n    };\n\n    handleChange = e => {\n        // console.log('in handlechange');\n        // console.log(e);\n        const selected = e.value\n        // console.log('selected: ', selected);\n        this.setState({\n            selected: selected\n        })\n    };\n\n    render() {\n        const selectedOption = this.state.selected\n        // console.log('selected: ', selectedOption)\n        const options = this.setOptions()\n        // console.log(options);\n\n        const curData = this.props.data[selectedOption]\n        console.log('RVDistGraph curdata: ', curData)\n        return (\n            <Fragment>\n                <div className=\"dropdown\">\n                    <Select\n                        // defaultValue={options[0]}\n                        selectedOption={this.state.selected}\n                        options={options}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                {selectedOption !== '' ? (\n                    <>\n                        <RVBar\n                            data={this.props.data}\n                            rv={selectedOption}\n                            conf={this.props.conf}\n                        />\n                    </>\n                ) : (\n                    <></>\n                )}\n            </Fragment>\n        )\n    }\n}\n\n// NON-DET\n// data looks like\n/*\nrandVars: {\n    \"a\": {\n        \"high\": _,\n        \"low\": _,\n        \"mean\": _,\n        \"stdev\": _,\n        \"vals\": [...]\n    },\n    \"c\": {...},\n    \"c_r\": {...},\n    ...\n}\n*/\n\n// DET data looks like\n/*\n    {\n        conf: 'det',\n        sat: False,\n        randVars: {\n            \"a\" 1,\n            ...\n        }\n    }\n*/\nclass RVBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: [],\n            rv: ''\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        rv: PropTypes.string,\n        conf: PropTypes.string\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // console.log('\\t--RVBar getDerivedStateFromProps');\n        // console.log('parent changed, updating state');\n        if (nextProps.rv !== prevState.rv) {\n            if (nextProps.conf === 'nondet') {\n                const valsArr = nextProps.data[nextProps.rv].vals\n                // console.log('\\nvalsArr: ');\n                // console.log(valsArr);\n                const freqObj = {}\n                valsArr.forEach(x => {\n                    if (nextProps.rv === 'k_s') {\n                        // console.log('special case for k_s');\n                        const rounded = x.toExponential(2)\n                        console.log('rounded = ', rounded)\n                        if (!freqObj[rounded]) {\n                            freqObj[rounded] = 1\n                        } else {\n                            freqObj[rounded] += 1\n                        }\n                    } else {\n                        let rounded = 0.0\n                        rounded = x.toFixed(2)\n                        if (!freqObj[rounded]) {\n                            freqObj[rounded] = 1\n                        } else {\n                            freqObj[rounded] += 1\n                        }\n                    }\n                })\n\n                const datapoints = []\n                for (const key in freqObj) {\n                    datapoints.push({ x: Number(key), y: freqObj[key] })\n                }\n                // this.setState({ datapoints: datapoints })\n                return { datapoints: datapoints, rv: nextProps.rv }\n            } else if (nextProps.conf === 'det') {\n                var val = nextProps.data[nextProps.rv]\n                if (nextProps.rv !== 'k_s') {\n                    val = val.toFixed(2)\n                } else {\n                    val = val.toExponential(2)\n                }\n                const datapoints = [{ x: Number(val), y: 1 }]\n                return { datapoints: datapoints, rv: nextProps.rv }\n            } else {\n                console.log('ERROR: invalid conf: ', nextProps.conf)\n            }\n        } else return null\n    }\n\n    getTickFormat = t => {\n        const rv = this.state.rv\n        if (rv === 'k_s') {\n            return t.toExponential(2)\n        } else if (rv === 'c' || rv === 'c_r' || rv === 'phi') {\n            return t.toFixed(1)\n        } else if (rv === 'a' || rv === 'n') {\n            return t.toFixed(3)\n        } else return t\n    };\n\n    render() {\n        // const l = `${this.state.rv} Distribution`;\n        // console.log(l);\n        var dist = null\n        if (this.props.conf === 'nondet') {\n            dist = <h5>{this.props.data[this.state.rv].dist}</h5>\n        }\n        return (\n            <div className=\"graph\">\n                <h4>Distribution Graph for {this.state.rv}</h4>{' '}\n                {dist !== null ? dist : null}\n                <V.VictoryChart\n                    domainPadding={20}\n                    overflow=\"visible\"\n                    theme={V.VictoryTheme.material}\n                    containerComponent={\n                        <V.VictoryVoronoiContainer\n                            labels={({ datum }) => `${datum.x} ${datum.y}`}\n                        />\n                    }\n                >\n                    <V.VictoryBar\n                        // style={{ data:}}\n                        data={this.state.datapoints}\n                    />\n                    <V.VictoryAxis\n                        label={UNITS[this.state.rv]}\n                        style={{\n                            axisLabel: { padding: 30 }\n                        }}\n                        tickFormat={t => this.getTickFormat(t)}\n                        tickCount={this.props.conf === 'det' ? 1 : null}\n                    />\n\n                    <V.VictoryAxis\n                        dependentAxis\n                        label=\"Count\"\n                        style={{\n                            axisLabel: { padding: 40 }\n                        }}\n                    />\n                </V.VictoryChart>\n            </div>\n        )\n    }\n}\n\nexport default RVDistGraph\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as V from 'victory';\nimport Select from 'react-select';\n\nclass FOSFreq extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            datapoints: [],\n            selected: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string,\n    };\n\n    componentDidMount = () => {\n        // this.initComp(this.)\n    };\n\n    setOptions = () => {\n        // console.log('~~~~ FreqFrequency setOptions ~~~~');\n        const options = [];\n\n        // sort options\n\n        var sorted = [];\n        for (const key in this.props.data) {\n            sorted.push(key);\n        }\n\n        sorted.sort();\n        sorted.forEach(e => {\n            options.push({ value: e, label: e });\n        });\n\n        return options;\n    };\n\n    handleChange = e => {\n        // e.preventDefault()\n        // console.log(e)\n        this.setState({\n            selected: e.value,\n        });\n    };\n\n    render() {\n        // console.log(this.props.data)\n        console.log('~~~~ FOSFreq ~~~~');\n        // console.log('current configuration: ', this.props.conf);\n        const options = this.setOptions();\n        // console.log(options);\n\n        // console.log('currently selected z = ', this.state.selected);\n        // console.log('current data in FOSFrequency: ', this.state.data);\n\n        return (\n            <div>\n                {/* <h4> Frequency histogram of the factor of safety values </h4> */}\n                <div className=\"dropdown\">\n                    <Select\n                        selectedOption={this.state.selected}\n                        options={options}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                {this.state.selected !== '' ? (\n                    <>\n                        <FreqHistFOS\n                            z={this.state.selected}\n                            data={this.props.data}\n                            conf={this.props.conf}\n                        />\n                    </>\n                ) : (\n                        <></>\n                    )}\n            </div>\n        );\n    }\n}\n\nclass FreqHistFOS extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            datapoints: [],\n            z: '',\n        };\n        // this.getData = this.getData.bind(this)\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        z: PropTypes.string,\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // console.log('~~~~FreqHistFOS getDerivedStateFromProps~~~~');\n        // console.log('next state: ', nextProps);\n        // console.log('prex z: ', prevState.z);\n        // console.log('next z: ', nextProps.z);\n        if (nextProps.z !== prevState.z) {\n            const z = nextProps.z;\n            // we need to make frequency array\n            // for current Z, get fos counts\n            // console.log(\n            //     'in getDerivedStateFromProps()  current data= ',\n            //     nextProps.data\n            // );\n            if (nextProps.conf === 'nondet') {\n                // console.log('non-deterministic');\n                const valsArr = nextProps.data[z].fs_vals;\n\n                // console.log('vals array: ');\n                // console.log(valsArr);\n                const freqObj = {};\n                valsArr.forEach(x => {\n                    const rounded = x.toFixed(2);\n                    if (!freqObj[rounded]) {\n                        freqObj[rounded] = 1;\n                    } else {\n                        freqObj[rounded] += 1;\n                    }\n                });\n\n                const datapoints = [];\n                for (const key in freqObj) {\n                    datapoints.push({ x: Number(key), y: freqObj[key] });\n                }\n                // this.setState({ datapoints: datapoints })\n                return { datapoints: datapoints, z: nextProps.z };\n            } else if (nextProps.conf === 'det') {\n                // console.log('deterministic');\n                const val = nextProps.data[z].toFixed(2);\n\n                // console.log('value = ', val);\n                const datapoint = [{ x: Number(z), y: val }];\n                // console.log('new datapoint: ', datapoint);\n                return { datapoints: datapoint, z: nextProps.z };\n            } else\n                console.log(\n                    'ERROR: incorrect configuration type: ',\n                    nextProps.conf\n                );\n        } else return null;\n    }\n\n    getCount = () => {\n        var max = 0;\n        const dp = this.state.datapoints;\n        dp.forEach(x => {\n            if (x.y > max) {\n                console.log('new max: ', x.y);\n                max = x.y;\n            }\n        });\n\n        // example: max = 41\n        // want [5, 10, 15, 20, 25, 30, 35, 40]\n        const list = [];\n        for (var i = 0; i < max; i++) {\n            if (i % 5 === 0) {\n                list.push(i);\n            }\n        }\n        return list;\n    };\n\n    render() {\n        // const width = this.props.data[Number(this.props.z)].high\n        // const dp = this.getData()\n        // console.log('rendering child!');\n\n        // console.log(this.state.datapoints);\n\n        return (\n            <div className=\"graph\">\n                <V.VictoryChart\n                    theme={V.VictoryTheme.material}\n                    domainPadding={20}\n                    containerComponent={\n                        <V.VictoryVoronoiContainer\n                            labels={({ datum }) => `${datum.x} ${datum.y}`}\n                        />\n                    }\n                >\n                    <V.VictoryBar data={this.state.datapoints} />\n                    <V.VictoryAxis\n                        label=\"Factor of Safety\"\n                        tickValues={[1]}\n                        tickFormat={t => t}\n                        style={{\n                            axisLabel: { padding: 30 },\n                        }}\n                    />\n                    <V.VictoryAxis\n                        dependentAxis\n                        label=\"Frequency\"\n                        tickCount={this.getCount().length}\n                        style={{\n                            axisLabel: { padding: 40 },\n                        }}\n                    />\n                </V.VictoryChart>\n            </div>\n        );\n    }\n}\n\nexport default FOSFreq;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as V from 'victory';\n\nclass PFbyZ extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            datapoints: [],\n            tickValues: []\n        };\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string,\n        H_wt: PropTypes.number\n    };\n\n    detGetDatapoints = () => {\n        const data = this.props.data;\n        const dp = [];\n        for (const key in data) {\n            if (data[key] >= 1) {\n                dp.push({ x: 1, y: key });\n            } else {\n                dp.push({ x: 0, y: key });\n            }\n        }\n        return dp;\n    };\n\n    componentDidMount = () => {\n        const vals = this.props.data;\n        var dp = [];\n        if (this.props.conf === 'nondet') {\n            for (const key in vals) {\n                dp.push({ x: vals[key].probFail, y: key });\n            }\n        } else if (this.props.conf === 'det') {\n            dp = this.detGetDatapoints();\n        }\n        const ticks = this.getTickVals()\n        this.setState({ datapoints: dp, tickValues: ticks });\n    };\n\n    getTickVals = () => {\n        const max = this.props.H_wt\n        const ticks = []\n        var cur = 0\n        while (cur <= max) {\n            ticks.push(cur)\n            cur += 0.5\n        }\n        console.log(\"TICKS!!    \")\n        console.log(ticks)\n        return ticks\n    }\n    printTicks(t) {\n        console.log(\"cur t: \", t)\n        if (Number(t) % 1 === 0) {\n            console.log(\"tick IS whole num: \", t)\n            return Number(t)\n        } else {\n            console.log(\"tick is not whole number:  \", t)\n            return null\n        }\n    }\n\n    render() {\n        console.log('~~~~ PFbyZ GRAPH ~~~~');\n        // console.log('data: ', this.props.data);\n        const dp = this.state.datapoints;\n        console.log('current datapoints: ');\n        console.log(dp);\n        // const ticks = Array.from(this.getTickVals())\n        // console.log(\"What the ticks should be: \")\n\n\n        const sharedAxisStyles = {\n            tickLabels: {\n                fontSize: 12\n            },\n            axisLabel: {\n                padding: 39,\n                fontSize: 12,\n                fontStyle: \"bold\"\n            }\n        }\n        if (dp.length > 0) {\n            // if (this.props.conf === 'nondet') {\n            return (\n                <div className=\"graph\">\n                    <h4>Depth from Surface vs. Probability of Failure</h4>\n                    <V.VictoryChart\n                        domainPadding={20}\n                        theme={V.VictoryTheme.material}\n                        containerComponent={\n                            <V.VictoryVoronoiContainer\n                                labels={({ datum }) => `${datum.x} ${datum.y}`}\n                            />\n                        }\n                    >\n                        <V.VictoryScatter\n                            style={{\n                                data: { stroke: \"#c43a31\" },\n                                parent: { border: \"1px solid #ccc\" }\n                            }}\n                            data={dp} />\n                        <V.VictoryAxis\n                            label=\"Probability of Failure\"\n                            style={sharedAxisStyles}\n                            orientation=\"top\"\n                            tickValues={[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\n                        />\n                        <V.VictoryAxis\n                            dependentAxis\n                            label=\"Z: Soil Depth from Surface (m)\"\n                            tickCount={this.props.H_wt + 1}\n                            tickFormat={t => t}\n\n                            // tickCount={\n                            //     this.props.H_wt * 2\n                            //     // this.state.datapoints.length > 10\n                            //     //     ? this.state.datapoints.length / 2\n                            //     //     : this.state.datapoints.length\n                            // }\n                            style={sharedAxisStyles}\n                            invertAxis={true}\n                        />\n                    </V.VictoryChart>\n                </div>\n            );\n            // } else if (this.props.conf === 'det') {\n            //     return (\n            //         <V.VictoryChart\n            //             domainPadding={20}\n            //             theme={V.VictoryTheme.material}\n            //             containerComponent={\n            //                 <V.VictoryVoronoiContainer\n            //                     labels={({ datum }) => `${datum.x} ${datum.y}`}\n            //                 />\n            //             }\n            //         >\n            //             <V.VictoryScatter data={dp} horizontal />\n            //             <V.VictoryAxis\n            //                 label=\"Z:Depth (m)\"\n            //                 tickCount={\n            //                     this.state.datapoints.length > 10\n            //                         ? this.state.datapoints.length / 2\n            //                         : this.state.datapoints.length\n            //                 }\n            //                 style={{ axisLabel: { padding: 40 } }}\n            //             />\n            //             <V.VictoryAxis\n            //                 dependentAxis\n            //                 label=\"Probability of Failure\"\n            //                 style={{\n            //                     axisLabel: { padding: 30 },\n            //                 }}\n            //             />\n            //         </V.VictoryChart>\n            //     );\n            // }\n        } else {\n            return <h2>no datapoints</h2>;\n        }\n    }\n}\n\nexport default PFbyZ;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as V from 'victory'\n\nclass SSbyZ extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datapoints: []\n        }\n    }\n\n    static propTypes = {\n        data: PropTypes.object,\n        conf: PropTypes.string,\n        sat: PropTypes.bool,\n        H_wt: PropTypes.number\n    };\n\n    componentDidMount = () => {\n        console.log('SSbyZ mounted!')\n        console.log('sat = ', this.props.sat)\n        if (this.props.sat === false) {\n            console.log('SSbyZ Mounting component with unsaturated soil')\n            const vals = this.props.data\n            console.log(vals)\n            var dp = []\n            if (this.props.conf === 'nondet') {\n                for (const z in vals) {\n                    dp.push({ x: vals[z].ss, y: z })\n                    // for (const ss in vals[z].ss_vals) {\n                    //     dp.push({ x: vals[z].ss_vals[ss], y: z });\n                    // }\n                }\n            } else if (this.props.conf === 'det') {\n                for (const z in vals) {\n                    dp.push({ x: vals[z].ss, y: z })\n                }\n            }\n\n            console.log(dp)\n            this.setState({ datapoints: dp })\n        }\n    };\n\n    render() {\n        console.log('~~~~ SSbyZ GRAPH ~~~~')\n\n        const sat = this.props.sat\n\n        if (sat === true) {\n            return (\n                <h2>\n                    This graph is only available for unsaturated soil analysis\n                </h2>\n            )\n        }\n\n        // console.log('data: ', this.props.data);\n        const dp = this.state.datapoints\n        console.log('current datapoints: ')\n        console.log(dp)\n        console.log(dp.length)\n        if (dp.length > 0) {\n            const ticks = [...Array(Math.ceil(this.props.H_wt)).keys()]\n            console.log(ticks)\n\n            return (\n                <div className=\"graph\">\n                    <h4>Depth from Surface vs. Suction Stress</h4>\n                    <V.VictoryChart\n                        domainPadding={20}\n                        theme={V.VictoryTheme.material}\n                        containerComponent={\n                            <V.VictoryVoronoiContainer\n                                labels={({ datum }) => `${datum.x} ${datum.y}`}\n                            />\n                        }\n                    >\n                        <V.VictoryScatter\n                            data={dp}\n                            // get x min with func\n                            domain={{ x: [-10, 0], y: [0, this.props.H_wt] }}\n                        />\n                        <V.VictoryAxis\n                            label=\"Suction Stress\"\n                            style={{\n                                axisLabel: { padding: 30 }\n                            }}\n                            orientation=\"top\"\n                        />\n                        <V.VictoryAxis\n                            dependentAxis\n                            label=\"Z: Soil Depth from Surface (m)\"\n                            tickCount={this.props.H_wt + 1}\n                            tickFormat={t => t}\n                            style={{\n                                axisLabel: { padding: 40 }\n                            }}\n                            invertAxis=\"true\"\n                        />\n                    </V.VictoryChart>\n                </div>\n            )\n        } else {\n            return <h2>no datapoints</h2>\n        }\n    }\n}\n\nexport default SSbyZ\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport * as Graphs from './graphs';\n\nclass DisplayGraphs extends Component {\n    static propTypes = {\n        data: PropTypes.object,\n        apiClient: PropTypes.object,\n    };\n\n    render() {\n        console.log('~~~~! DisplayGraphs data: ', this.props.data);\n        return (\n            <div>\n                <Tabs defaultActiveKey=\"probFail/z\" id=\"visualizations\">\n                    <Tab\n                        eventKey=\"freqHistFos\"\n                        title=\"Factor of Safety Frequency Histograms\"\n                    >\n                        <Graphs.FOSFreq\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                        />\n                    </Tab>\n                    <Tab\n                        eventKey=\"freqHistRV\"\n                        title=\"Random Variable Frequency Histograms\"\n                    >\n                        <Graphs.RVDist\n                            data={this.props.data.randVars}\n                            conf={this.props.data.conf}\n                        />\n                    </Tab>\n\n                    <Tab\n                        eventKey=\"probFail/z\"\n                        title=\"Probablity of Failure by Depth\"\n                    >\n                        <Graphs.PFbyZ\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                            H_wt={this.props.data.H_wt}\n                        />\n                    </Tab>\n                    <Tab eventKey=\"ss/z\" title=\"Suction Stress by Depth\">\n                        <Graphs.SSbyZ\n                            data={this.props.data.z}\n                            conf={this.props.data.conf}\n                            sat={this.props.data.sat}\n                            H_wt={this.props.data.H_wt}\n                        />\n                    </Tab>\n                </Tabs>\n                <ul></ul>\n            </div>\n        );\n    }\n}\n\nexport default DisplayGraphs;\n","import React, { Component } from 'react'\nimport PropType from 'prop-types'\nimport { Table } from 'react-bootstrap'\n\nclass FOSTable extends Component {\n    static propTypes = {\n        data: PropType.object,\n        conf: PropType.string\n    };\n\n    getRows = conf => {\n        var list = []\n        var sortedZ = []\n\n        for (const key in this.props.data) {\n            // console.log(key)\n            sortedZ.push(key)\n        }\n        sortedZ.sort()\n        for (var key in sortedZ) {\n            var i = sortedZ[key]\n            // console.log(i)\n            if (conf === 'nondet') {\n                list.push(\n                    <FSRowDisplay\n                        key={i}\n                        z={i}\n                        data={this.props.data[i]}\n                        conf={conf}\n                    />\n                )\n            } else if (conf === 'det') {\n                list.push(\n                    <FSRowDisplay\n                        key={i}\n                        z={i}\n                        val={this.props.data[i]}\n                        conf={conf}\n                    />\n                )\n            }\n        }\n        return list\n    };\n\n    render() {\n        const conf = this.props.conf\n        console.log('in FOSTable. conf = ', conf)\n\n        if (conf === 'nondet') {\n            return (\n                <div className=\"paddedPage displayTable\">\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Z</th>\n                                <th>FS Low</th>\n                                <th>FS High</th>\n                                <th>FS Mean</th>\n                                <th>FS Stdev</th>\n                                <th>Probability of Failure</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(conf)}</tbody>\n                    </Table>\n                </div>\n            )\n        } else if (conf === 'det') {\n            return (\n                <div className=\"paddedPage displayTable\">\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Z</th>\n                                <th>Value</th>\n                                <th>Probability of Failure</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(conf)}</tbody>\n                    </Table>\n                </div>\n            )\n        } else {\n            return <p>Error: invalid conf value - {conf}</p>\n        }\n    }\n}\n\nclass FSRowDisplay extends React.Component {\n    static propTypes = {\n        data: PropType.object,\n        z: PropType.string,\n        conf: PropType.string,\n        val: PropType.number\n    };\n\n    render() {\n        if (this.props.conf === 'nondet') {\n            return (\n                <tr>\n                    <td>\n                        {' '}\n                        <b>{this.props.z}</b>\n                    </td>\n                    <td>{this.props.data.low}</td>\n                    <td>{this.props.data.high}</td>\n                    <td>{this.props.data.mean}</td>\n                    <td>{this.props.data.stdev}</td>\n                    <td>{this.props.data.probFail}</td>\n                </tr>\n            )\n        } else if (this.props.conf === 'det') {\n            return (\n                <tr>\n                    <td>\n                        {' '}\n                        <b>{this.props.z}</b>\n                    </td>\n                    <td>{this.props.val}</td>\n            <td>{this.props.val < 1 ? 0 : 1}</td>\n                </tr>\n            )\n        } else {\n            return <p>Error: invalid analysis type</p>\n        }\n    }\n}\n\nexport default FOSTable\n","import React, { Component, Fragment } from 'react';\nimport PropType from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport LABELS from '../../resources/labels';\n\nclass RVTable extends Component {\n    static propTypes = {\n        data: PropType.object,\n        sat: PropType.bool,\n        conf: PropType.string,\n    };\n\n    detRows = sat => {\n        if (sat === true) {\n            return (\n                <Fragment>\n                    <RandVarRowDisplayDet\n                        data={this.props.data.c}\n                        label={LABELS.c}\n                    />\n                    <RandVarRowDisplayDet\n                        data={this.props.data.c_r}\n                        label={LABELS.c_r}\n                    />\n                    <RandVarRowDisplayDet\n                        data={this.props.data.phi}\n                        label={LABELS.phi}\n                    />\n                </Fragment>\n            );\n        } else if (sat === false) {\n            return (\n                <Fragment>\n                    <RandVarRowDisplayDet\n                        data={this.props.data.c}\n                        label={LABELS.c}\n                    />\n                </Fragment>\n            );\n        }\n    };\n\n    getRows = (vars, conf) => {\n        const list = [];\n        console.log('data: ', this.props.data);\n        for (let key in vars) {\n            key = vars[key];\n            var i = this.props.data[key];\n            console.log('key: ', key);\n\n            if (conf === 'det') {\n                console.log('i: ', i);\n                list.push(\n                    <RandVarRowDisplayDet\n                        key={key}\n                        rv={key}\n                        value={this.props.data[key]}\n                        label={LABELS[key]}\n                    />\n                );\n            } else if (conf === 'nondet') {\n                console.log('my key here is ', key);\n                list.push(\n                    <RandVarRowDisplayNondet\n                        key={key}\n                        rv={key}\n                        data={this.props.data[key]}\n                        label={LABELS[key]}\n                    />\n                );\n            } else {\n                list.push(<p>Error: invalid Analysis Type</p>);\n            }\n        }\n        return list;\n    };\n\n    getTable = (sat, conf) => {\n        var vars = [];\n\n        sat === true\n            ? (vars = ['c', 'c_r', 'phi'])\n            : (vars = ['c', 'c_r', 'phi', 'k_s', 'a', 'n']);\n\n        if (conf === 'det') {\n            return (\n                <Fragment>\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Random Variable</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(vars, conf)}</tbody>\n                    </Table>\n                </Fragment>\n            );\n        } else if (conf === 'nondet') {\n            return (\n                <Fragment>\n                    <Table striped hover bordered size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Random Variable</th>\n                                <th>Low</th>\n                                <th>High</th>\n                                <th>Mean</th>\n                                <th>Stdev</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.getRows(vars, conf)}</tbody>\n                    </Table>\n                </Fragment>\n            );\n        }\n    };\n\n    render() {\n        console.log('IN RVTABLE. data = ', this.props.data);\n        const sat = this.props.sat;\n        const conf = this.props.conf;\n        console.log('sat: ', sat);\n        console.log('conf: ', conf);\n        const table = this.getTable(sat, conf);\n        return (\n            <Fragment>\n                <div className=\"paddedPage\">\n                    <div className=\"displayTable\">{table}</div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nclass RandVarRowDisplayDet extends Component {\n    static propTypes = {\n        value: PropType.number,\n        label: PropType.string,\n        key: PropType.string,\n    };\n\n    render() {\n        if (this.props.key === 'k_s') {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{this.props.value.toExponential(2)}</td>\n                </tr>\n            );\n        } else {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{this.props.value}</td>\n                </tr>\n            );\n        }\n    }\n}\n\nclass RandVarRowDisplayNondet extends React.Component {\n    static propTypes = {\n        data: PropType.object,\n        label: PropType.string,\n        rv: PropType.string,\n    };\n\n    render() {\n        console.log('rv is ', this.props.rv);\n        if (this.props.rv === 'k_s') {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{Number(this.props.data.low).toExponential(2)}</td>\n                    <td>{Number(this.props.data.high).toExponential(2)}</td>\n                    <td>{Number(this.props.data.mean).toExponential(2)}</td>\n                    <td>{Number(this.props.data.stdev).toExponential(2)}</td>\n                </tr>\n            );\n        } else {\n            return (\n                <tr>\n                    <td>\n                        <b>{this.props.label}</b>\n                    </td>\n                    <td>{this.props.data.low}</td>\n                    <td>{this.props.data.high}</td>\n                    <td>{this.props.data.mean}</td>\n                    <td>{this.props.data.stdev}</td>\n                </tr>\n            );\n        }\n    }\n}\n\nexport default RVTable;\n","/* eslint-disable react/no-unescaped-entities */\nimport React, { Component, Fragment } from 'react'\nimport PropType from 'prop-types'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Header from './Header'\nimport DisplayGraphs from './DisplayGraphs'\nimport API from './apiClient'\n// import { testing } from '../resources/test_data'\nimport * as Tables from './tables'\n\nclass DisplayPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null\n            // data: testing.results\n        }\n    }\n\n    static propTypes = {\n        apiClient: PropType.object\n    };\n\n    componentDidMount = () => {\n        console.log('getting results...')\n        API.get('/api/display').then(res => {\n            console.log(res)\n            console.log(res.data)\n            const results = res.data.results[1]\n\n            console.log('rounding results to appropriate significant figures')\n\n            this.roundResults(results)\n            console.log('setting results as state: ', results)\n            this.setState({ data: results })\n        })\n    };\n\n    roundResults = res => {\n        console.log('In roundResults. res = ', res)\n        // rounding randVars correctly\n        // arrs for each significant figure\n        const one = ['c', 'c_r', 'phi']\n        const three = ['a', 'n']\n        const enTwo = ['k_s']\n        // collect keys from randVar obj\n        const keys = []\n        for (const key in res.randVars) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (res.randVars.hasOwnProperty(key)) keys.push(key)\n        }\n        console.log('keys: ', keys)\n        let sig = 0\n\n        keys.forEach(e => {\n            console.log('current key = ', e)\n            if (one.includes(e)) {\n                sig = 1\n            } else if (three.includes(e)) {\n                sig = 3\n            } else if (enTwo.includes(e)) {\n                sig = -1\n            }\n            res.randVars[e] = this.roundRandVar(res.randVars[e], sig)\n        })\n    };\n\n    roundRandVar = (rv, sig) => {\n        console.log('rounding rv: ', rv)\n        const newRv = rv\n        if (sig === -1) {\n            console.log('k_s')\n            newRv.high = isNaN(rv.high) ? rv.high : rv.high.toExponential(2)\n            newRv.low = isNaN(rv.low) ? rv.low : rv.low.toExponential(2)\n            newRv.mean = isNaN(rv.mean) ? rv.mean : rv.mean.toExponential(2)\n            newRv.stdev = isNaN(rv.stdev)\n                ? rv.stdev\n                : rv.stdev.toExponential(2)\n            for (let i = 0; i < rv.vals.length; i++) {\n                newRv.vals[i] = rv.vals[i].toExponential(2)\n            }\n        } else {\n            const mult = Math.pow(10, sig)\n            console.log('mult = ', mult)\n            newRv.high = Math.round((rv.high + Number.EPSILON) * mult) / mult\n            newRv.low = Math.round((rv.low + Number.EPSILON) * mult) / mult\n            newRv.mean = Math.round((rv.mean + Number.EPSILON) * mult) / mult\n            newRv.stdev = Math.round((rv.stdev + Number.EPSILON) * mult) / mult\n            for (let i = 0; i < rv.vals.length; i++) {\n                newRv.vals[i] =\n                    Math.round((rv.vals[i] + Number.EPSILON) * mult) / mult\n            }\n        }\n\n        return newRv\n    };\n\n    componentDidMount = () => {\n        this.getResults().then(res => {\n            // console.log(res)\n            // console.log(res.results)\n            const newData = res.results\n            this.setState({ data: newData })\n        })\n    };\n\n    getResults = async () => {\n        try {\n            const res = await API.get('/api/display')\n            if (res.status === 200) {\n                console.log(res.status)\n            }\n            return res.data\n        } catch (err) {\n            console.log(err)\n        }\n    };\n\n    render() {\n        console.log(\"what's our data? here it is!\", this.state.data)\n\n        if (this.state.data !== null) {\n            return (\n                <Fragment>\n                    <Header title=\"Display\" />\n                    <div className=\"paddedPage\">\n                        <Tabs defaultActiveKey=\"graphs\" id=\"display-tabs\">\n                            <Tab eventKey=\"randVars\" title=\"Random Variables\">\n                                <Tables.RVTable\n                                    data={this.state.data.randVars}\n                                    sat={this.state.data.sat}\n                                    conf={this.state.data.conf}\n                                />\n                            </Tab>\n                            <Tab eventKey=\"FS\" title=\"Factor of Safety by Z\">\n                                <Tables.FOSTable\n                                    data={this.state.data.z}\n                                    conf={this.state.data.conf}\n                                />\n                            </Tab>\n                            <Tab eventKey=\"graphs\" title=\"Visualizations\">\n                                <DisplayGraphs data={this.state.data} />\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </Fragment>\n            )\n        } else {\n            return <h2>No data received from backend</h2>\n        }\n    }\n}\n\nexport default DisplayPage\n","import React, { Component, Fragment } from 'react'\nimport AppMode from '../AppMode'\nimport WelcomePage from './Welcome.jsx'\nimport DataFormPage from './DataForm.jsx'\nimport DisplayPage from './Display.jsx'\n// import API from './apiClient'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link,\n//     Redirect\n// } from 'react-router-dom'\n\nconst modeTitle = {}\n\nmodeTitle[AppMode.WELCOME] = 'Welcome to LISA'\nmodeTitle[AppMode.DATAFORM] = 'LISA Inputs'\nmodeTitle[AppMode.DISPLAY] = 'Display Data'\n\nconst modeToPage = {}\nmodeToPage[AppMode.WELCOME] = WelcomePage\nmodeToPage[AppMode.DATAFORM] = DataFormPage\nmodeToPage[AppMode.DISPLAY] = DisplayPage\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // for real.\n            mode: AppMode.DATAFORM\n            // mode: AppMode.DISPLAY\n            // results: null\n            // datasets to use while testing\n            // testing: testing\n        }\n    }\n\n    handleChangeMode = newMode => {\n        this.setState({ mode: newMode })\n    };\n\n    render() {\n        const ModePage = modeToPage[this.state.mode]\n        return (\n            <Fragment>\n                <ModePage\n                    mode={this.state.mode}\n                    changeMode={this.handleChangeMode}\n                    // onSubmit={this.onSubmit}\n                />\n                {/* <DisplayPage\n                        // data={this.state.testing.results}\n                        data={this.state.results}\n                    /> */}\n                {/* <Switch>\n                    <Route path=\"/\">\n                        <DataFormPage\n                            mode={this.state.mode}\n                            changeMode={this.handleChangeMode}\n                            onSubmit={this.onSubmit}\n                        />\n                    </Route>\n                    <Route path=\"/results\">\n                        <DisplayPage data={this.state.results} />\n\n                    </Route>\n                </Switch> */}\n            </Fragment>\n        )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './styles/App.css'\nimport './styles/index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('app')\n)\nif (module.hot) {\n    module.hot.accept()\n}\n"],"sourceRoot":""}